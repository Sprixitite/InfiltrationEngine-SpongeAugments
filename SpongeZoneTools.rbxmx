<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBX5C8914EF38754D1EAB49C2DCAE299265">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<string name="Name">SpongeZoneTools</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="Script" referent="RBX2CB85A19FC4B4F19A1F9CF90F63884CF">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Main</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{BA25A1CB-E014-4DF4-B49E-AEDDD88D8479}</string>
				<ProtectedString name="Source"><![CDATA[local spongeZoneToolbar = plugin:CreateToolbar("SpongeZone Tools")

local allPlugins = {
	AttributeImporter = script.Parent.AttributeImporter.Main,
	ToggleGroupVis = script.Parent.ToggleGroupVis.Main,
	OneClickTools = script.Parent.OneClickTools.Main
}

local function MakePluginMenu(id, text, iconId)
	return plugin:CreatePluginMenu(`SZT_IE_Menu_{id}`, text, iconId)
end

local function MakeAction(id, text, tooltip, iconId, allowBinding)
	allowBinding = allowBinding ~= nil and allowBinding or true
	return plugin:CreatePluginAction(`SZT_IE_Action_{id}`, text, tooltip, iconId, allowBinding)
end

for k, v in pairs(allPlugins) do
	print(`Initializing SpongeZone tool {k}...`)
	
	local toolDetails = require(v)
	local toolButton = spongeZoneToolbar:CreateButton(`SZT_IE_Toolbar_{toolDetails.ID}`, toolDetails.Tooltip, toolDetails.IconAssetID, toolDetails.Text or toolDetails.ID)
	
	if toolDetails.BuildMenu ~= nil then
		toolDetails.BuildMenu(MakePluginMenu, MakeAction)
	end
	
	toolButton.Click:Connect(toolDetails.ClickedCallback)
end]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX743BEC8595424ADE829AA4901D6F9906">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">UI</string>
				<string name="ScriptGuid">{E91F60D1-D0F8-4574-A4B5-D8BC735E9A8E}</string>
				<ProtectedString name="Source"><![CDATA[local PropArrayUI = {}

PropArrayUI.PADDING4 = UDim.new(0, 4)
PropArrayUI.PADDING8 = UDim.new(0, 8)

PropArrayUI.ROUNDED4 = Instance.new("UICorner")
PropArrayUI.ROUNDED4.CornerRadius = PropArrayUI.PADDING4

PropArrayUI.VERTICAL_UILIST = Instance.new("UIListLayout")
PropArrayUI.VERTICAL_UILIST.FillDirection = Enum.FillDirection.Vertical
PropArrayUI.VERTICAL_UILIST.Padding = PropArrayUI.PADDING8
PropArrayUI.VERTICAL_UILIST.SortOrder = Enum.SortOrder.LayoutOrder

PropArrayUI.HORIZONTAL_UILIST = PropArrayUI.VERTICAL_UILIST:Clone()
PropArrayUI.HORIZONTAL_UILIST.FillDirection = Enum.FillDirection.Horizontal

PropArrayUI.VECTOR_COMPONENT_UILAYOUT = Instance.new("UIListLayout")
PropArrayUI.VECTOR_COMPONENT_UILAYOUT.SortOrder = Enum.SortOrder.Name
PropArrayUI.VECTOR_COMPONENT_UILAYOUT.HorizontalFlex = Enum.UIFlexAlignment.SpaceAround
PropArrayUI.VECTOR_COMPONENT_UILAYOUT.VerticalAlignment = Enum.VerticalAlignment.Center
PropArrayUI.VECTOR_COMPONENT_UILAYOUT.Padding = PropArrayUI.PADDING8

function PropArrayUI.NewFrame(padded: boolean?, ...: Instance)
	padded = padded or false
	
	local newFrame = Instance.new("Frame")
	newFrame.BackgroundTransparency = 0.5
	newFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
	
	if padded then
		local framePadding = Instance.new("UIPadding")
		local paddingUdim = UDim.new(0, 8)
		framePadding.PaddingTop = paddingUdim
		framePadding.PaddingLeft = paddingUdim
		framePadding.PaddingRight = paddingUdim
		framePadding.PaddingBottom = paddingUdim
		framePadding.Parent = newFrame
	end
	
	for _, item in pairs({...}) do
		item.Parent = newFrame
	end
	
	return newFrame
end

function PropArrayUI.NewAttrLabel(text: string, colour: Color3)
	local newLabel = PropArrayUI.NewLabel(text)
	newLabel.BackgroundColor3 = colour
	local _, _, v = colour:ToHSV()
	newLabel.TextColor3 = v>0.5 and Color3.fromRGB(0,0,0) or Color3.fromRGB(255,255,255)
	PropArrayUI.ROUNDED8:Clone().Parent = newLabel
	return newLabel
end

function PropArrayUI.NewLabel(text: string)
	local newLabel = Instance.new("TextLabel")
	newLabel.Font = Enum.Font.SciFi
	newLabel.TextScaled = true
	newLabel.Text = text
	return newLabel
end

function PropArrayUI.NewTextBox(placeholderText: string)
	local newTextbox = Instance.new("TextBox")
	newTextbox.Font = Enum.Font.SciFi
	newTextbox.TextScaled = true
	newTextbox.PlaceholderText = placeholderText
	return newTextbox
end

local function NewVectorComponent(label)
	local label = PropArrayUI.NewAttrLabel(label, Color3.new(255,255,255))
	label.SizeConstraint = Enum.SizeConstraint.RelativeYY
	label.Name = "0Label"
	
	local container = PropArrayUI.NewFrame(false, PropArrayUI.VECTOR_COMPONENT_UILAYOUT:Clone(), label, )
end

function PropArrayUI.NewVectorInput()
	
end

return PropArrayUI
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX33EFAF335E814CCFB69C007BA92B1AB9">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">ToolsCommon</string>
				<string name="ScriptGuid">{2D5EAC34-8CC9-43F4-B456-D43738C01990}</string>
				<ProtectedString name="Source"><![CDATA[local ToolsCommon = {}

function ToolsCommon:LevelFolder()
	return workspace:FindFirstChild("DebugMission") or workspace:FindFirstChild("Level")
end

function ToolsCommon:NullableDescendantOf(instanceDescendant: Instance, childPath: {string}, searchRoot: Instance?)
	searchRoot = searchRoot or workspace
	local comparing = nil
	for _, name in pairs(childPath) do
		comparing = (comparing or searchRoot):FindFirstChild(name)
		if comparing == nil then break end
	end
	if comparing == nil then return false end
	return comparing:IsAncestorOf(instanceDescendant)
end

function ToolsCommon:InstanceIsAny(instance: Instance, classNames: {string})
	for _, className in pairs(classNames) do
		if instance:IsA(className) then return true end
	end
	return false
end

function ToolsCommon:FindFirstChildWithNameAndClass(parent: Instance, name: string, classname: string): classname?
	for _, child in pairs(parent:GetChildren()) do
		if child.Name == name and child:IsA(classname) then return child end
	end
	return nil
end

function ToolsCommon:TableMerge(tblTo: {any}, tblFrom: {any}, preferExisting: boolean?)
	if tblTo == nil then return tblFrom or {} end
	if tblFrom == nil then return tblTo or {} end
	preferExisting = preferExisting or true
	for k, v in pairs(tblFrom) do
		if tblTo[k] == nil then
			tblTo[k] = v
			continue
		end
		if preferExisting then
			continue
		end
		tblTo[k] = v
	end
	return tblTo
end

function ToolsCommon:TableSlice(tblSrc: {any}, sliceStart: number, sliceEnd: number)
	local tblTo = {}
	for i=sliceStart, sliceEnd, 1 do
		tblTo[#tblTo+1] = tblSrc[i]
	end
	return tblTo
end

return ToolsCommon]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX52F97A9F58CB4254997A926C46D90B7A">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">ToggleGroupVis</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX44372562098A453080CE5C2C264607F5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{7B825C44-7342-4A3D-9FBE-7FC60ED35674}</string>
					<ProtectedString name="Source"><![CDATA[local ChangeHistoryService = game:GetService("ChangeHistoryService")
local SelectionService = game:GetService("Selection")

local GROUP_VIS_ATTR_NAME = "_SpongeGroupVisibility"
local ELMNT_VIS_ATTR_NAME = "_SpongeElmntVisibility"

local function IsGroup(inst: Instance)
	local instType = inst.ClassName
	return instType == "Folder" or instType == "Model", instType
end

local function StoreElementProperty(element: Instance, property: string, newVal: any)
	element:SetAttribute(`_SpongeElmnt{property}`, element[property])
	element[property] = newVal
end

local function RestoreElementProperty(element: Instance, property: string, expected: any)
	if element[property] ~= expected then
		warn(`{element.Name}{property} set to unexpected value after being toggled, assuming new value to be intentional`)
		return element[property]
	end
	local stored = element:GetAttribute(`_SpongeElmnt{property}`)
	element[property] = stored
	return stored
end

local function ToggleElementVisibility(element: BasePart, nextVisState: boolean)
	if nextVisState == element:GetAttribute(ELMNT_VIS_ATTR_NAME) then
		--print(`{element.Name} already in desired state, leaving as-is`)
		return
	end

	if nextVisState and (element:GetAttribute(ELMNT_VIS_ATTR_NAME) == nil) then
		warn("Element in disabled visgroup had no visibility metadata - likely added after disable. Skipping")
		return
	end

	if nextVisState == false then
		StoreElementProperty(element, "Transparency", 1)
		StoreElementProperty(element, "Locked",       true)
		StoreElementProperty(element, "CanCollide",   false)
		StoreElementProperty(element, "CanTouch",     false)
		StoreElementProperty(element, "CanQuery",     false)
	else
		RestoreElementProperty(element, "Transparency", 1)
		RestoreElementProperty(element, "Locked",       true)
		RestoreElementProperty(element, "CanCollide",   false)
		RestoreElementProperty(element, "CanTouch",     false)
		RestoreElementProperty(element, "CanQuery",     false)
	end
	
	element:SetAttribute(ELMNT_VIS_ATTR_NAME, nextVisState)
end

local function CalculateGroupParentsRecurse(parent: Instance, tbl: table?)
	tbl = tbl or {}
	if parent == nil then warn("Group's root parent was nil!?") return tbl end
	if parent == workspace.Parent then return tbl end
	if IsGroup(parent) then
		if parent:GetAttribute(GROUP_VIS_ATTR_NAME) == nil then
			parent:SetAttribute(GROUP_VIS_ATTR_NAME, true)
		end
		tbl[#tbl+1] = parent:GetAttribute(GROUP_VIS_ATTR_NAME)
	end
	return CalculateGroupParentsRecurse(parent.Parent, tbl)
end

local function CalculateGroupVisibility(group)
	local visTbl = CalculateGroupParentsRecurse(group)
	for _, v in pairs(visTbl) do
		if not v then return false end
	end
	return true
end

local function ToggleGroupVisibility(group: Instance, invert: boolean)
	-- Invert the selected group's visibility
	-- Assume group is visible if no group vis is set
	if group:GetAttribute(GROUP_VIS_ATTR_NAME) == nil then group:SetAttribute(GROUP_VIS_ATTR_NAME, true) end
	if invert then group:SetAttribute(GROUP_VIS_ATTR_NAME, not group:GetAttribute(GROUP_VIS_ATTR_NAME)) end

	local thisGroupIsVisible = CalculateGroupVisibility(group)

	for _, child in pairs(group:GetChildren()) do
		local isBasePart = child:IsA("BasePart")
		local isGroup = IsGroup(child)
		if not (isBasePart or isGroup) then continue end
		if isBasePart then ToggleElementVisibility(child, thisGroupIsVisible) end 
		if isGroup then ToggleGroupVisibility(child, false) end
	end
end

local function GroupVisTogglePressed()
	local selection = SelectionService:Get()

	local selectionIsValid = true
	for instName, inst in pairs(selection) do
		local instValid, instType = IsGroup(inst)
		if not instValid then
			warn(`GroupVisToggle only works on Models & Folders, deselect {instType} {instName} before running!`)
			selectionIsValid = false
		end
	end

	if not selectionIsValid then return end

	local recording = ChangeHistoryService:TryBeginRecording("Toggle Group Visibility")
	if not recording then warn("Failed to initialize history recording, doing nothing") return end

	for _, inst in pairs(selection) do
		ToggleGroupVisibility(inst, true)
	end

	ChangeHistoryService:FinishRecording(recording, Enum.FinishRecordingOperation.Commit)

end

return {
	ClickedCallback = GroupVisTogglePressed,
	ID = "Toggle Group Visibility", 
	Tooltip = "Toggle the visibility of a folder/model", 
	IconAssetID = "rbxassetid://86288177650040"
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXCB7DD0406E9A414D80F72D39E0C82D2E">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">PropArray</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX44901196FCE244189AD62BA60DF9D821">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{35934633-F930-4752-BA83-99A83B4FBED3}</string>
					<ProtectedString name="Source"><![CDATA[local ChangeHistoryService = game:GetService("ChangeHistoryService")

local function NewStyledFrame()
	local newFrame = Instance.new("Frame")
	newFrame.BackgroundTransparency = 0.5
	newFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
	return newFrame
end

local function NewVectorInput()
	local container = NewStyledFrame()
	local componentControls = { x = true, y = true, z = true }
	local i = 0
	for k, _ in pairs(componentControls) do
		componentControls[k] = script.Parent.UI.VectorComponentInput:Clone()
		componentControls[k].Name = `{i}VectorComponentInput`
		componentControls[k].Parent = container
		componentControls[k]["0Label"].Text = string.upper(k)
		i = i + 1
	end
	return { Container = container, Components = componentControls }
end

local function ReadVectorInput(vi)
	for k, componentInput in pairs(vi.Components) do
		componentInput["1Input"]
	end
end

local function OpenMenu()
	
end

return {
	ClickedCallback = OpenMenu,
	ID = "Prop Array",
	Tooltip = "Repeat a prop N times along a vector",
	IconAssetID = "rbxassetid://106247740984287"
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXB91EA91497F543F1BB4678DDDEA06E92">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">AttributeImporter</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX0A56721A1E1B4201A58599A089D2FBA4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{EF17C8F4-4127-4D1F-890C-286169E6F9E2}</string>
					<ProtectedString name="Source"><![CDATA[local selectionService = game:GetService("Selection")
local changeHistoryService = game:GetService("ChangeHistoryService")

local common = require(script.Parent.Parent.ToolsCommon)
local attributeMan = require(script.Parent.AttributeMan)
local cinfoHandler = require(script.Parent.InfilClassInfo)

local function ImportAttributesForSelection(includePrivate, includeGlobal, deleting)
	local debugMission = common:LevelFolder()
	if debugMission == nil then warn("Couldn't find mission folder! Doing nothing") return end
	
	local selection = selectionService:Get()
	local validSelection = nil
	if includePrivate and not includeGlobal and not deleting then
		validSelection = {}
		for _, v in pairs(selection) do
			local thisInstanceIsValid = cinfoHandler.ClassHasPrivateAttrs( cinfoHandler.FindInstanceClass(v) ) 
			if not thisInstanceIsValid then
				warn(`Selection {v.Name} has no valid private attributes! Item will be skipped`)
			else
				validSelection[#validSelection+1] = v
			end
		end
	end
	
	if includeGlobal and not includePrivate and not deleting then
		validSelection = {}
		for _, v in pairs(selection) do
			local _, tPath = cinfoHandler.FindInstanceClass(v)
			local thisInstanceIsValid = cinfoHandler.ClassAcceptsGlobalAttrs(tPath)
			if not thisInstanceIsValid then
				warn(`Selection {v.Name} is of class {tPath.Name} which does not make use of globals! Item will be skipped`) 
			else
				validSelection[#validSelection+1] = v
			end
		end
	end
	
	local recording = changeHistoryService:TryBeginRecording("Import Attributes For Selection")
	if not recording then warn("Failed to initialize history recording, doing nothing") return end
	
	-- Use pcall if sprix isn't in the session
	-- Just in case :3
	local runner
	if game.Players:FindFirstChild("Sprixitite") == nil then
		runner = function(fn)
			local success, errMsg = pcall(fn)
			if not success then warn(`Error importing attributes! Reason is as follows:\n{errMsg}`) end
			return success
		end
	else
		runner = function(fn) fn() return true end
	end
	
	local success = runner(function()
		validSelection = validSelection or selection
		for _, v in pairs(validSelection) do
			local instanceClass, classPath = cinfoHandler.FindInstanceClass(v)
			local attributeList
			if classPath == nil then
				attributeList = cinfoHandler.GetPrivateAttributes(instanceClass)
			else
				local classInfo = cinfoHandler.ClassInfoFromPath(classPath)
				attributeList = common:TableMerge(
					cinfoHandler.GetPrivateAttributes(instanceClass),
					includeGlobal and cinfoHandler.ClassAcceptsGlobalAttrs(classInfo) and cinfoHandler.GetGlobalAttributes() or {},
					true
				)
			end
			
			attributeMan.ApplyAttributes(v, attributeList, deleting)
		end
	end)
	
	changeHistoryService:FinishRecording(recording, success and Enum.FinishRecordingOperation.Commit or Enum.FinishRecordingOperation.Cancel)
	
end

local function NonGlobalImport()
	ImportAttributesForSelection(true, false, false)
end

local function GlobalImport()
	ImportAttributesForSelection(false, true, false)
end

local function AllImport()
	ImportAttributesForSelection(true, true, false)
end

local function DeleteImported()
	ImportAttributesForSelection(true, true, true)
end

local function DeleteAll()
	local recording = changeHistoryService:TryBeginRecording("Import Attributes For Selection")
	if not recording then warn("Failed to initialize history recording, doing nothing") return end
	
	for _, v in pairs(selectionService:Get()) do
		for attrName, _ in pairs(v:GetAttributes()) do
			v:SetAttribute(attrName, nil)
		end
	end
	
	changeHistoryService:FinishRecording(recording, Enum.FinishRecordingOperation.Commit)
end

local pluginMenu: PluginMenu? = nil

local function BuildMenu(newPluginMenu, newAction)
	local nonGlobalImport = newAction(
		"AttributeImportNonGlobal", 
		"Import Non-Global Attributes",
		"Import all attributes specific to this Prop/StateComponent",
		"rbxassetid://73551897964793"
	)
	nonGlobalImport.Triggered:Connect(NonGlobalImport)
	
	local globalImport = newAction(
		"AttributeImportGlobal", 
		"Import Global Attributes",
		"Import all attributes which aren't specific to a given Prop/StateComponent",
		"rbxassetid://109357542849581"
	)
	globalImport.Triggered:Connect(GlobalImport)
	
	local allImport = newAction(
		"AttributeImportAll", 
		"Import All Attributes",
		"Import all global and relevant non-global attributes to this Prop/StateComponent",
		"rbxassetid://88889481728921"
	)
	allImport.Triggered:Connect(AllImport)
	
	local deleteImported = newAction(
		"AttributeImportDelete",
		"Delete All Imported Attributes",
		"Delete all imported attributes from this Prop/StateComponent",
		"rbxassetid://120558084860550"
	)
	deleteImported.Triggered:Connect(DeleteImported)
	
	local deleteAll = newAction(
		"AttributeImportDeleteAll",
		"Delete All Attributes",
		"Delete all attributes from this Instance",
		"rbxassetid://120558084860550"
	)
	deleteAll.Triggered:Connect(DeleteAll)
	
	pluginMenu = newPluginMenu("AttributeImporter", "Import Attributes", "rbxassetid://88889481728921")
	pluginMenu:AddAction(nonGlobalImport)
	pluginMenu:AddAction(globalImport)
	pluginMenu:AddAction(allImport)
	pluginMenu:AddAction(deleteImported)
	pluginMenu:AddAction(deleteAll)
end

local function OpenWindow()
	pluginMenu:ShowAsync()
end

return {
	ID = "Attribute Importer",
	Tooltip = "Automatically import all supported attributes to a prop",
	IconAssetID = "rbxassetid://88889481728921",
	ClickedCallback = OpenWindow,
	BuildMenu = BuildMenu
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXE5CEC3A6AD6C44C688724E04D30E0959">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">PropListExtensions</string>
					<string name="ScriptGuid">{A13780BC-4015-49C6-82E2-2B28498EC609}</string>
					<ProtectedString name="Source"><![CDATA[local AttributeType = require(script.Parent.NotMineThisIsSperosPleaseDontSueMe.PropAttributeTypes)

return {
	Bot = {
		AvoidInvestigation 			= { AttributeType.BOOL		, false 	},
		BodyguardTarget 			= { AttributeType.STRING	, nil 		},
		Behavior 					= { AttributeType.STRING	, "PatrolWalk" 	},
		CameraArea 					= { AttributeType.STRING	, nil 		},
		CharName 					= { AttributeType.STRING	, "Mr. Unlocalized String" },
		-- CharNameGroup 			= { AttributeType.INT		, 1 		}, Undocumented, dunno what to use for default
		CivilianHighlight 			= { AttributeType.BOOL		, false 	},
		Class 						= { AttributeType.STRING	, "Sec" 	},
		ClientTag 					= { AttributeType.STRING	, nil 		},
		CustomHairColor 			= { AttributeType.OPTIONAL_MISSION_COLOR, nil },
		CustomHairStyle				= { AttributeType.STRING	, nil 		},
		CustomPantsId				= { AttributeType.STRING	, nil 		},
		CustomShirtId				= { AttributeType.STRING	, nil 		},
		CustomSkinTone				= { AttributeType.OPTIONAL_MISSION_COLOR, nil },
		DespawnBlocked				= { AttributeType.STRING	, "0" 		},
		DespawnCondition			= { AttributeType.STRING	, nil 		},
		DetectionSpeed				= { AttributeType.NUMBER	, 1   		},
		EnforceClass				= { AttributeType.STRING	, "Alert1" 	},
		HeadTracking				= { AttributeType.BOOL		, false 	},
		HostageDifficulty			= { AttributeType.NUMBER	, 0 		},
		InterrogationNotification 	= { AttributeType.STRING	, nil 		},
		InterrogationVariable		= { AttributeType.STRING	, nil 		},
		Inv							= { AttributeType.STRING	, nil 		},
		MaxHealth					= { AttributeType.NUMBER	, 100 		},
		NeverIgnoreConversations	= { AttributeType.BOOL		, false 	},
		Nodes						= { AttributeType.STRING	, nil 		},
		NodesBreak					= { AttributeType.STRING	, nil 		},
		NoHostageDownInCombat		= { AttributeType.BOOL		, false 	},
		NoInvestigation				= { AttributeType.BOOL		, false 	},
		ObjectiveHighlight			= { AttributeType.BOOL		, false 	},
		OnlyHideWhenDead			= { AttributeType.BOOL		, false 	},
		Outfit						= { AttributeType.STRING	, "BasicSecurity" 	},
		PatrolCycleLength			= { AttributeType.NUMBER	, 1 		},
		PowerArea					= { AttributeType.STRING	, nil 		},
		Profile						= { AttributeType.STRING	, "BasicSecurity" 	},
		SearchArea					= { AttributeType.STRING	, nil 		},
		Seed						= { AttributeType.NUMBER	, 4736251 	},
		ServerTag					= { AttributeType.STRING	, nil 		},
		SpeakerId					= { AttributeType.STRING	, "Speaker.Unset" 	},
		Title						= { AttributeType.STRING	, "Name.Unset" 		},
		Weapon						= { AttributeType.STRING	, "K45" 	},
	},
	
	ConditionalGeometry = {
		IsSpawned = { AttributeType.EXPRESSION, "1" }
	},
	
	DoorGlass = {
		CanShatter = { AttributeType.BOOL, true },
	},
	
	DirectionalSpawnV2 = {
		BlockRange 			= { AttributeType.INT		,  2 	},
		EnabledCondition 	= { AttributeType.EXPRESSION, "1" 	}
	},
	
	FixedSpawn = {
		Enabled 		= { AttributeType.EXPRESSION, "1" 	},
		IgnoreProximity = { AttributeType.BOOL		, false },
		Range 			= { AttributeType.INT		, 3 	},
		SpawnTag 		= { AttributeType.STRING	, nil 	}
	},
	
	Glass = {
		StateValue = { AttributeType.EXPRESSION, nil 	},
		NoAutoSize = { AttributeType.BOOL	   , false 	}, -- No idea what this actually does, all I know is the templates use it
	},
	
	Link = {
		Move = 	{ AttributeType.EXPRESSION, "1" },
		Open = 	{ AttributeType.EXPRESSION, "1" },
		Path = 	{ AttributeType.EXPRESSION, "1" },
		Sound = { AttributeType.NUMBER	  ,  1  },
	},

	StateScript = {
		DebugLineVariable 	= { AttributeType.STRING, nil },
		DebugLogId			= { AttributeType.STRING, nil },
		DebugVariable		= { AttributeType.STRING, nil },
		Run 			= { AttributeType.STRING, "1" },
		ScriptSource 	= { AttributeType.STRING, nil },
		TriggerEvent	= { AttributeType.STRING, nil }
	},
	
	Motor = {
		Link			= { AttributeType.STRING, nil },
		Offset			= { AttributeType.CFRAME, nil },
		Rotation 		= { AttributeType.VECTOR3, nil },
		AnimType		= { AttributeType.INT	, nil },
		AnimTime		= { AttributeType.NUMBER, nil },
		ClampMax		= { AttributeType.NUMBER, 0 },
		ClampMin		= { AttributeType.NUMBER, 1 },
		ClampLoop		= { AttributeType.BOOL	, false },
	}
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX6863DBBE07D04811A1D64AE45E46537D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">InfilClassInfo</string>
					<string name="ScriptGuid">{C41F5D79-94D5-4CD3-AA9C-67754D8BE978}</string>
					<ProtectedString name="Source"><![CDATA[local common = require(script.Parent.Parent.ToolsCommon)

local InfilClassInfo = {}

local classSearchInfo = require(script.Parent.InfilClassSearchInfo)
InfilClassInfo.SearchInfo = classSearchInfo

local infilEngineAttributes = {
	Global = require(script.Parent.NotMineThisIsSperosPleaseDontSueMe.GlobalAttributes),
	Private = require(script.Parent.NotMineThisIsSperosPleaseDontSueMe.AttributesMap),
	Extensions = require(script.Parent.PropListExtensions)
}

local function FindExactClassRecurse(instance: Instance, knownClass: classSearchInfo.ClassSearchInfo, recurse_tpath: {string}?)
	recurse_tpath = recurse_tpath or {}
	local exactClass = nil
	if knownClass.TypeIsName then
		exactClass = instance.Name
	elseif knownClass.TypeIsAttribute then
		exactClass = instance:GetAttribute("Type") 
	elseif knownClass.TypeIsParentName then
		exactClass = instance.Parent.Name
	else
		exactClass = knownClass.Name
	end
	
	recurse_tpath[#recurse_tpath+1] = knownClass.Name
	if knownClass.SubTypes == nil then
		return exactClass, recurse_tpath
	end
	
	for _, subType in pairs(knownClass.SubTypes) do
		if subType.Name ~= exactClass then continue end
		return FindExactClassRecurse(instance, subType, recurse_tpath)
	end
end

function InfilClassInfo.FindInstanceClass(instance)
	for _, v in pairs(InfilClassInfo.SearchInfo) do
		if not common:NullableDescendantOf(instance, v.FolderPath, common:LevelFolder()) then continue end
		
		if v.ValidClasses ~= nil and not common:InstanceIsAny(instance, v.ValidClasses) then 
			warn(`Instance {instance.Name} is not a valid {v.Name}! Skipping`) 
			return nil 
		end
		
		return FindExactClassRecurse(instance, v)
	end
	
	warn(`{instance.Parent.Name}.{instance.Name} is of unknown class!`)
	return instance.Name, nil
end

function InfilClassInfo.GetPrivateAttributes(className)
	local privateAttrList = {}
	common:TableMerge(privateAttrList, infilEngineAttributes.Extensions[className])
	common:TableMerge(privateAttrList, infilEngineAttributes.Private[className])

	return privateAttrList
end

function InfilClassInfo.GetGlobalAttributes() return infilEngineAttributes.Global end

local function tostringClassPath(classPath, classPathStr)
	if #classPath < 1 then return classPathStr end
	classPathStr = classPathStr or ""
	classPathStr = `{classPathStr}/{classPath[1]}`
	return tostringClassPath(common:TableSlice(classPath, 2, #classPath), classPathStr)
end

local function traverseClassPath(classPath, classSrc: {classSearchInfo.ClassSearchInfo})
	if #classPath < 2 then
		return classSrc[classPath[1]]
	else
		return traverseClassPath(common:TableSlice(classPath, 2, #classPath), classSrc[classPath[1]].SubTypes)
	end
end

function InfilClassInfo.ClassInfoFromPath(classPath)
	return traverseClassPath(classPath, InfilClassInfo.SearchInfo)
end

function InfilClassInfo.ClassHasPrivateAttrs(exactClass)
	return infilEngineAttributes.Private[exactClass] ~= nil or infilEngineAttributes.Extensions[exactClass] ~= nil
end

function InfilClassInfo.ClassAcceptsGlobalAttrs(class: classSearchInfo.ClassSearchInfo)
	return class.ImportsGlobals
end

return InfilClassInfo]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXEB9A801A011E46A3BE2EECE1AB3FCCDA">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">InfilClassSearchInfo</string>
					<string name="ScriptGuid">{8FDCD250-1D0E-485F-8F87-75520304AECA}</string>
					<ProtectedString name="Source"><![CDATA[export type ClassSearchInfo = {
	Name:				string,
	FolderPath: 		{string},
	ValidClasses: 		{string},
	
	ImportsGlobals:		boolean?,
	TypeIsAttribute: 	boolean?,
	TypeIsName: 		boolean?,
	TypeIsParentName: 	boolean?,
	
	SubTypes:			{ClassSearchInfo}?,
}

local classSearchInfo: {ClassSearchInfo} = {
	StateComponent = {
		FolderPath 		= { "StateComponents" },
		ValidClasses 	= { "BoolValue" },
		TypeIsAttribute = true,
		ImportsGlobals 	= false
	},
	ConditionalGeometry = {
		FolderPath 		= { "ConditionalGeometry" },
		ValidClasses 	= { "Model" }
	},
	LoudSpawn = {
		FolderPath 		= { "LoudSpawns" },
		ValidClasses 	= { "BasePart" },
		TypeIsName 		= true,
		ImportsGlobals 	= false
	},
	Prop = {
		FolderPath 		= { "Props" },
		ValidClasses 	= { "BasePart" },
		TypeIsName 		= true
	},
	Glass = {
		FolderPath 		= { "Glass" },
		ValidClasses 	= { "BasePart" }
	},
	Link = {
		FolderPath 		= { "Cells", "Links" },
		ValidClasses 	= { "BasePart" },
		ImportsGlobals 	= false
	},
	Bot = { 
		FolderPath 		= { "Bots" },
		ValidClasses 	= { "BoolValue" },
		ImportsGlobals 	= false
	},
	CustomPropElement = {
		FolderPath 		= { "CustomProps" },
		ValidClasses 	= { "BasePart" },
		ImportsGlobals 	= false,
		TypeIsName 		= true,
		SubTypes = {
			Motor 	= { ImportsGlobals = false },
			Base 	= { ImportsGlobals = false, TypeIsParentName = true }
		}
	}
}

local function GenNamesRecurse(on)
	for k, v in pairs(on) do
		v.Name = k
		if v.SubTypes == nil then continue end
		GenNamesRecurse(v.SubTypes)
	end
end

GenNamesRecurse(classSearchInfo)

return classSearchInfo]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXDB995AEE734241F985815427A6B94BD4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">AttributeMan</string>
					<string name="ScriptGuid">{65E3F41E-4C03-47DA-B6BA-B18BBE32298D}</string>
					<ProtectedString name="Source"><![CDATA[local attributeType = require(script.Parent.NotMineThisIsSperosPleaseDontSueMe.PropAttributeTypes)

local AttributeMan = {}

local attributeTypeDefaults = {
	[attributeType.NUMBER					] = 0,
	[attributeType.INT						] = 0,
	[attributeType.OPTIONAL_INT				] = 0,

	[attributeType.EXPRESSION				] = "",
	[attributeType.STATE_VALUE				] = "",
	[attributeType.STRING					] = "",
	[attributeType.OPTIONAL_MATERIAL		] = "Neon",

	[attributeType.NETWORK_ID				] = 0,
	[attributeType.NETWORK_ID_STRING		] = "",

	[attributeType.BOOL						] = false,
	[attributeType.OPTIONAL_BOOL			] = false,

	[attributeType.OPTIONAL_MISSION_COLOR	] = Color3.new(0,1,0),
	[attributeType.VECTOR3					] = Vector3.new(),

	[attributeType.CFRAME					] = CFrame.new(),
}

function AttributeMan.ValueOrDefault(attrDetails)
	if attrDetails[2] == nil then
		return attributeTypeDefaults[attrDetails[1]]
	else
		return attrDetails[2]
	end
end

function AttributeMan.ApplyAttributes(to, attrs, deleting)
	for attrName, attrDetails in pairs(attrs) do
		if deleting then to:SetAttribute(attrName, nil) continue end
		if to:GetAttribute(attrName) ~= nil then continue end
		to:SetAttribute(attrName, AttributeMan.ValueOrDefault(attrDetails))
	end
end

return AttributeMan
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBXFEC5B7BBA2D44EFE850835B0376658A8">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">NotMineThisIsSperosPleaseDontSueMe</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXD9C1A20602B745D4880713C4D3B25C37">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">AttributesMap</string>
						<string name="ScriptGuid">{5C9F99E6-2435-405E-989B-4D228C350EC3}</string>
						<ProtectedString name="Source"><![CDATA[-- NOTE: Do not edit this file manually. Use PropCompiler.py.
AttributeType = require(script.Parent.PropAttributeTypes)
return {
	AccessPoint = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		TriggerInvestigation = {AttributeType.EXPRESSION, true},
	},
	AmmoBox = {
	},
	BadgeReader = {
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		CustomBadges = {AttributeType.STRING, ""},
		UseITBadge = {AttributeType.BOOL, false},
		UseLeadSecurityBadge = {AttributeType.BOOL, false},
		UseSecurityBadge = {AttributeType.BOOL, false},
	},
	BarredWindow = {
		GlassMaterial = {AttributeType.STRING, "SmoothPlastic"},
		GlassTransparency = {AttributeType.NUMBER, 0.8},
		HorizontalSpacing = {AttributeType.NUMBER, 2},
		VerticalSpacing = {AttributeType.NUMBER, 2},
	},
	BoxStack2 = {
	},
	CandlePlate = {
	},
	CardboardBox = {
	},
	CardReader = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		ValidCards = {AttributeType.STRING, ""},
		MinimumCard = {AttributeType.STRING, ""},
		LightLevel = {AttributeType.INT, 1},
		Blocked = {AttributeType.EXPRESSION, ""},
	},
	CeilingAccessPoint = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		TriggerInvestigation = {AttributeType.EXPRESSION, true},
	},
	CircuitBoxLarge = {
		ClientExaminedVariable = {AttributeType.STATE_VALUE, ""},
		ExaminedVariable = {AttributeType.STATE_VALUE, ""},
		RewiredVariable = {AttributeType.STATE_VALUE, ""},
	},
	ClimbablePipe = {
	},
	ClothingRack = {
		Active = {AttributeType.EXPRESSION, ""},
		Disguise = {AttributeType.STRING, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
	},
	CodeCardReader = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		ValidCards = {AttributeType.STRING, ""},
		CodeVariable = {AttributeType.STATE_VALUE, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		WrongCodeVariable = {AttributeType.STATE_VALUE, ""},
		CodeSeed = {AttributeType.INT, 1},
		PromptText = {AttributeType.STRING, ""},
		MinimumCard = {AttributeType.STRING, ""},
		ReaderEnabled = {AttributeType.EXPRESSION, "1"},
		AltPromptActive = {AttributeType.EXPRESSION, ""},
		AltPromptSwitchTime = {AttributeType.NUMBER, 1},
	},
	CodeKeypad = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		PromptText = {AttributeType.STRING, ""},
		WrongCodeVariable = {AttributeType.STATE_VALUE, ""},
		ReadoutText = {AttributeType.EXPRESSION, ""},
		RewireTime = {AttributeType.NUMBER, 12},
		PromptSubtitle = {AttributeType.STRING, ""},
		KeypadEnabled = {AttributeType.EXPRESSION, "1"},
		NoiseEnabled = {AttributeType.EXPRESSION, ""},
		CodeVariable = {AttributeType.STATE_VALUE, ""},
		CodeSeed = {AttributeType.INT, 1},
	},
	CombatCuttableFence = {
	},
	DecorativePipe = {
		RingSpace = {AttributeType.NUMBER, 8},
		Corner = {AttributeType.BOOL, false},
		BendTop = {AttributeType.BOOL, false},
	},
	DecorativeVent = {
		BendBottom = {AttributeType.INT, 0},
		BendTop = {AttributeType.INT, 0},
		RingSpace = {AttributeType.NUMBER, 8},
		RingDepth = {AttributeType.NUMBER, 0},
	},
	DepositBox1 = {
		TiltItem = {AttributeType.NUMBER, 0},
		RotateItem = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		IncludeSidePart = {AttributeType.BOOL, true},
		BoxNumber = {AttributeType.INT, 1},
	},
	DepositBox2 = {
		TiltItem = {AttributeType.NUMBER, 0},
		RotateItem = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		IncludeSidePart = {AttributeType.BOOL, true},
		BoxNumber = {AttributeType.INT, 1},
	},
	DepositBox3 = {
		TiltItem = {AttributeType.NUMBER, 0},
		RotateItem = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		IncludeSidePart = {AttributeType.BOOL, true},
		BoxNumber = {AttributeType.INT, 1},
	},
	DeskPhoneCallable = {
		CallAcceptedVariable = {AttributeType.STATE_VALUE, ""},
		CallIgnoredVariable = {AttributeType.STATE_VALUE, ""},
		IsCalling = {AttributeType.EXPRESSION, ""},
		CallTime = {AttributeType.INT, 15},
	},
	DeskSafe = {
		ItemTagString = {AttributeType.STRING, ""},
		Item = {AttributeType.STRING, ""},
	},
	DisguiseTrigger = {
		Active = {AttributeType.EXPRESSION, ""},
		Disguise = {AttributeType.STRING, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
	},
	DomeCamera = {
		AngleMax = {AttributeType.STRING, "0"},
		AngleMin = {AttributeType.STRING, "0"},
		Exterior = {AttributeType.BOOL, true},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		NetworkDestination = {AttributeType.NETWORK_ID_STRING, ""},
		CamSet = {AttributeType.STRING, ""},
		CameraArea = {AttributeType.STRING, ""},
		AngleDown = {AttributeType.NUMBER, 0},
		Wireless = {AttributeType.BOOL, true},
		CamNumber = {AttributeType.INT, 0},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		Angle = {AttributeType.STRING, 0},
		DetectionSpeed = {AttributeType.NUMBER, 1},
		LocationKey = {AttributeType.STRING, ""},
		MapFloorOffset = {AttributeType.INT, 0},
	},
	DoorGlass = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorMetal = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		DifficultDrill = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorMetalElectronic = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		DifficultDrill = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorPushLeft = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		DifficultDrill = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorWood = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoorWoodElectronic = {
		LockBack = {AttributeType.EXPRESSION, false},
		LockFront = {AttributeType.EXPRESSION, false},
		DoubleDoor = {AttributeType.EXPRESSION, false},
		RemoteUnlock = {AttributeType.EXPRESSION, ""},
		PathIgnoreUnlocked = {AttributeType.INT, 0},
		PathIgnoreOpen = {AttributeType.INT, 0},
		PathIgnoreBroken = {AttributeType.INT, 0},
		PathRecover = {AttributeType.INT, 0},
		BotCloseCondition = {AttributeType.EXPRESSION, ""},
		Blocked = {AttributeType.EXPRESSION, ""},
		NoKick = {AttributeType.EXPRESSION, false},
		AutoLock = {AttributeType.EXPRESSION, false},
		PathReq1 = {AttributeType.STRING, ""},
		PathReq2 = {AttributeType.STRING, ""},
		Access = {AttributeType.STRING, ""},
		FailsafeUnlock = {AttributeType.EXPRESSION, ""},
		DifficultLock = {AttributeType.EXPRESSION, false},
		AlarmVariable = {AttributeType.STATE_VALUE, ""},
		AlarmDisabled = {AttributeType.EXPRESSION, ""},
		BotRelockCondition = {AttributeType.EXPRESSION, ""},
	},
	DoubleVaultDoor = {
		OpenCondition = {AttributeType.EXPRESSION, ""},
	},
	Elevator = {
	},
	ElevatorCallButton = {
		CallVariable = {AttributeType.STATE_VALUE, ""},
		DisabledInCombat = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
	},
	ElevatorCardReader = {
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		DisabledInCombat = {AttributeType.BOOL, false},
	},
	EventPumpkin = {
	},
	ExplosionSource = {
	},
	FloorAccessCover = {
		CanOpen = {AttributeType.EXPRESSION, ""},
		OpenedVariable = {AttributeType.STATE_VALUE, ""},
	},
	Flowerpot = {
		Seed = {AttributeType.INT, 0},
	},
	FreestandingSafe = {
		Seed = {AttributeType.INT, 1},
		CanInteract = {AttributeType.EXPRESSION, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		ExplosiveOpenVariable = {AttributeType.STATE_VALUE, ""},
		OpenedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRemovedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRotationX = {AttributeType.NUMBER, 0},
		ItemRotationY = {AttributeType.NUMBER, 0},
		ItemRotationZ = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
	},
	GarageDoor = {
		Height = {AttributeType.EXPRESSION, "0"},
	},
	GlassKitchenTable = {
	},
	HackableComputer = {
		MonitorOffset = {AttributeType.VECTOR3, Vector3.new(0, 0, 0)},
		MonitorAngle = {AttributeType.NUMBER, 0},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		ScreenText = {AttributeType.EXPRESSION, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		NetworkId = {AttributeType.NETWORK_ID, 0},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		PasswordUnlockedVariable = {AttributeType.STATE_VALUE, ""},
		NetworkNameTag = {AttributeType.STRING, ""},
		DesktopBackground = {AttributeType.STRING, ""},
		PasswordDifficulty = {AttributeType.EXPRESSION, 0},
		OldMonitor = {AttributeType.BOOL, false},
		PhysicalAccessBlocked = {AttributeType.EXPRESSION, 0},
	},
	HeavySecurityDoor = {
		ServerExplosiveFullDamageVariable = {AttributeType.STATE_VALUE, ""},
		ExplosiveNoDamageVariable = {AttributeType.STATE_VALUE, ""},
		ExplosivePartialDamageVariable = {AttributeType.STATE_VALUE, ""},
		ExplosiveFullDamageVariable = {AttributeType.STATE_VALUE, ""},
		OpenCondition = {AttributeType.EXPRESSION, ""},
	},
	Helicopter = {
		ActiveCondition = {AttributeType.EXPRESSION, ""},
		StopAttemptDialogue = {AttributeType.STRING, ""},
		StartupTime = {AttributeType.INT, 60},
		ProgressVariable = {AttributeType.STATE_VALUE, ""},
		PoliceShutdownVariable = {AttributeType.STATE_VALUE, ""},
	},
	HiddenWallSafe = {
		PromptVisible = {AttributeType.EXPRESSION, ""},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		OpenedVariable = {AttributeType.STATE_VALUE, ""},
		Seed = {AttributeType.INT, 1},
		ExplosiveOpenVariable = {AttributeType.STATE_VALUE, ""},
		ItemRotationX = {AttributeType.INT, 0},
		ItemRotationY = {AttributeType.INT, 0},
		ItemRotationZ = {AttributeType.INT, 0},
		Image = {AttributeType.INT, 0},
		SafeLocatedVariable = {AttributeType.STATE_VALUE, ""},
		CoverColor = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
		OffsetX = {AttributeType.NUMBER, 0},
		KeyItem = {AttributeType.BOOL, false},
		CoverMaterial = {AttributeType.STRING, ""},
		SafeTag = {AttributeType.STRING, ""},
		HiddenShuffleId = {AttributeType.STRING, ""},
	},
	IndustrialShelvesSmall = {
		BoxSeed = {AttributeType.INT, 0},
		BoxDensity = {AttributeType.NUMBER, 0},
		BoxColor = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
	},
	InteractionBlocker = {
	},
	IntroCam = {
	},
	Ladder = {
		Decorative = {AttributeType.BOOL, false},
	},
	LandscapePhotoHorizontalRectangle = {
		Image = {AttributeType.INT, 0},
	},
	LandscapePhotoSquare = {
		Image = {AttributeType.INT, 0},
	},
	LandscapePhotoVerticalThird = {
		Image = {AttributeType.INT, 0},
		OffsetX = {AttributeType.NUMBER, 0},
	},
	Laptop = {
	},
	LaptopOld = {
		DesktopBackground = {AttributeType.STRING, ""},
		PasswordUnlockedVariable = {AttributeType.STATE_VALUE, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		NetworkId = {AttributeType.NETWORK_ID, 1},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		PasswordLockedCondition = {AttributeType.EXPRESSION, ""},
		PasswordDifficulty = {AttributeType.EXPRESSION, 0},
		ScreenText = {AttributeType.EXPRESSION, ""},
		NetworkNameTag = {AttributeType.STRING, ""},
	},
	LaundryBasket = {
		Disguise = {AttributeType.STRING, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
	},
	LeverageMove = {
		MoveDist = {AttributeType.EXPRESSION, 0},
		Prop = {AttributeType.STRING, ""},
		MovedToEndVariable = {AttributeType.STATE_VALUE, ""},
		VisibleCondition = {AttributeType.EXPRESSION, "1"},
		Heavy = {AttributeType.BOOL, true},
	},
	LongCoffeeTable = {
	},
	LootCash = {
		ItemTagString = {AttributeType.STRING, ""},
	},
	LootCash2 = {
		ItemTagString = {AttributeType.STRING, ""},
	},
	LootThermite = {
		ItemTagString = {AttributeType.STATE_VALUE, ""},
	},
	LootWeapons = {
		ItemTagString = {AttributeType.STRING, ""},
	},
	LowVent = {
		Blocked = {AttributeType.EXPRESSION, ""},
	},
	MetalDetector = {
		PowerLevel = {AttributeType.EXPRESSION, ""},
	},
	MinimapBlock = {
	},
	Monitor = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		ScreenText = {AttributeType.EXPRESSION, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		DesktopBackground = {AttributeType.STRING, ""},
	},
	NetworkSwitch = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		TriggerInvestigation = {AttributeType.EXPRESSION, true},
	},
	NoDropZone = {
	},
	OldMonitor = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		ScreenText = {AttributeType.EXPRESSION, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		DesktopBackground = {AttributeType.STRING, ""},
	},
	PowerBoxLarge = {
		TagWhileActive = {AttributeType.BOOL, false},
		AllowDisabling = {AttributeType.EXPRESSION, "1"},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		CombatDisableTarget = {AttributeType.EXPRESSION, ""},
		NoPropDamage = {AttributeType.EXPRESSION, ""},
		AllowRestoring = {AttributeType.EXPRESSION, "1"},
	},
	PowerBoxSmall = {
		TagWhileActive = {AttributeType.BOOL, false},
		AllowDisabling = {AttributeType.EXPRESSION, "1"},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		CombatDisableTarget = {AttributeType.EXPRESSION, ""},
		NoPropDamage = {AttributeType.EXPRESSION, ""},
		AllowRestoring = {AttributeType.EXPRESSION, "1"},
		Locked = {AttributeType.BOOL, false},
		ObjectName = {AttributeType.STRING, ""},
		PowerAreaParent = {AttributeType.STATE_VALUE, ""},
	},
	PropBase = {
	},
	RadioStation = {
		SocialEngineeringLevel = {AttributeType.INT, 1},
		DistractionDisabled = {AttributeType.EXPRESSION, ""},
		DistractionActive = {AttributeType.EXPRESSION, ""},
		DistractionVariable = {AttributeType.STATE_VALUE, ""},
		DistractionDialogue = {AttributeType.STRING, ""},
		DistractionSubtitle = {AttributeType.STRING, ""},
		Enabled = {AttributeType.EXPRESSION, "1"},
	},
	ScalablePlanter = {
		PlantHeight = {AttributeType.NUMBER, 3},
		PlantWidth = {AttributeType.NUMBER, 0},
	},
	ScalableWallPlanter = {
		PlantWidth = {AttributeType.NUMBER, 1},
		PlantHeight = {AttributeType.NUMBER, 2},
	},
	SearchableFilingCabinets = {
		FilesSpawned = {AttributeType.EXPRESSION, ""},
		KeyItem = {AttributeType.BOOL, false},
		ItemRemovedVariable = {AttributeType.STATE_VALUE, ""},
		ItemTagString = {AttributeType.STRING, ""},
	},
	SecurityCamera = {
		AngleMax = {AttributeType.STRING, "0"},
		AngleMin = {AttributeType.STRING, "0"},
		Exterior = {AttributeType.BOOL, true},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		NetworkDestination = {AttributeType.NETWORK_ID_STRING, ""},
		CamSet = {AttributeType.STRING, ""},
		CameraArea = {AttributeType.STRING, ""},
		AngleDown = {AttributeType.NUMBER, 0},
		Wireless = {AttributeType.BOOL, true},
		CamNumber = {AttributeType.INT, 0},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		Angle = {AttributeType.STRING, 0},
		DetectionSpeed = {AttributeType.NUMBER, 1},
		LocationKey = {AttributeType.STRING, ""},
		MapFloorOffset = {AttributeType.INT, 0},
	},
	ServerRack = {
	},
	ServerRackWideTerminal = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		Disconnected = {AttributeType.EXPRESSION, ""},
		DesktopTransparency = {AttributeType.NUMBER, 0},
		DesktopBackground = {AttributeType.STRING, ""},
		UseOldMonitor = {AttributeType.OPTIONAL_BOOL, false},
		ScreenText = {AttributeType.EXPRESSION, ""},
		NetworkNameTag = {AttributeType.STRING, ""},
		PasswordDifficulty = {AttributeType.EXPRESSION, ""},
		PasswordUnlockedVariable = {AttributeType.STATE_VALUE, ""},
		PasswordLockedCondition = {AttributeType.EXPRESSION, ""},
		ManualPasswordVariable = {AttributeType.STATE_VALUE, ""},
		ManualPasswordList = {AttributeType.STRING, ""},
		ManualPasswordRevealed = {AttributeType.EXPRESSION, ""},
		SecurityKeyNeeded = {AttributeType.EXPRESSION, ""},
		SecurityKeyInsertedVariable = {AttributeType.STATE_VALUE, ""},
	},
	StaticAmmoBox = {
	},
	SurfaceText = {
		TextKey = {AttributeType.STRING, ""},
		Font = {AttributeType.STRING, ""},
		HorizontalAlignment = {AttributeType.INT, 2},
		TextColor3 = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(1, 1, 1)},
	},
	TableGlass = {
	},
	TableGlassLarge = {
	},
	ThermiteBurn = {
		ProgressVariable = {AttributeType.STATE_VALUE, ""},
		StartedVariable = {AttributeType.STATE_VALUE, ""},
		BurnTime = {AttributeType.INT, 90},
	},
	ThinBush = {
	},
	TimelockCodePanel = {
		GlobalCountdownState = {AttributeType.STATE_VALUE, ""},
		CompletedVariable = {AttributeType.STATE_VALUE, ""},
		TimelockEnabled = {AttributeType.EXPRESSION, ""},
		SetState = {AttributeType.STATE_VALUE, ""},
		CountTime = {AttributeType.NUMBER, 60},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		SetValue = {AttributeType.EXPRESSION, ""},
	},
	TrespassZoneDisplay = {
		Enabled = {AttributeType.BOOL, true},
	},
	TriggerLocalChat = {
		Id = {AttributeType.STRING, ""},
		Variable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	TriggerVision = {
		Hold = {AttributeType.NUMBER, 0},
		Dist = {AttributeType.NUMBER, 40},
		ZoneSize = {AttributeType.NUMBER, 0.8},
		Active = {AttributeType.EXPRESSION, ""},
		Variable = {AttributeType.STATE_VALUE, ""},
	},
	TriggerZone = {
		IsGlobal = {AttributeType.BOOL, false},
		IsLocal = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		Variable = {AttributeType.STATE_VALUE, ""},
		HighlightZone = {AttributeType.BOOL, false},
		UpdateFrequency = {AttributeType.NUMBER, 1},
	},
	TutorialText = {
	},
	Van = {
		IsOpen = {AttributeType.EXPRESSION, ""},
		DoorAngleR = {AttributeType.EXPRESSION, 0},
		DoorAngleL = {AttributeType.EXPRESSION, 0},
	},
	VaultOpenRight = {
		OpenCondition = {AttributeType.EXPRESSION, ""},
	},
	WallSafe = {
		Seed = {AttributeType.INT, 1},
		CanInteract = {AttributeType.EXPRESSION, ""},
		CodeRevealedVariable = {AttributeType.STATE_VALUE, ""},
		ExplosiveOpenVariable = {AttributeType.STATE_VALUE, ""},
		OpenedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRemovedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRotationX = {AttributeType.NUMBER, 0},
		ItemRotationY = {AttributeType.NUMBER, 0},
		ItemRotationZ = {AttributeType.NUMBER, 0},
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		KeyItem = {AttributeType.BOOL, false},
	},
	Window = {
		Bulletproof = {AttributeType.EXPRESSION, false},
		StateValue = {AttributeType.STATE_VALUE, ""},
		GlassColor = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
	},
	WindowClimb = {
		Blocked = {AttributeType.EXPRESSION, ""},
		Vertical = {AttributeType.BOOL, false},
	},
	WoodChair = {
	},
	WoodShootingTarget = {
	},
	WoodTargetWithSensor = {
	},
	LandscapePhotoIds = {
	},
	AccessRequestNode = {
		ServerCondition = {AttributeType.EXPRESSION, ""},
		Dialogue = {AttributeType.STRING, ""},
		ToolRequired = {AttributeType.STRING, ""},
		AccessVariable = {AttributeType.STATE_VALUE, ""},
		SocialEngineeringLevel = {AttributeType.INT, 0},
		BotServerTag = {AttributeType.STRING, ""},
		AccessOnceVariable = {AttributeType.STATE_VALUE, ""},
		AccessTime = {AttributeType.NUMBER, 1},
	},
	AlarmButton = {
	},
	ArmoredTruck = {
	},
	BasicPart = {
		Material = {AttributeType.STRING, "SmoothPlastic"},
		ColorHex = {AttributeType.STRING, "FFFFFF"},
	},
	BiometricLock = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
		BotServerTag = {AttributeType.STRING, ""},
		RewireEnabled = {AttributeType.EXPRESSION, ""},
	},
	Cabinet = {
	},
	ConditionalHighJumpRequired = {
		Climber3Condition = {AttributeType.EXPRESSION, 1},
		Color = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
		Material = {AttributeType.STRING, "Plastic"},
	},
	CustomMissionLoadPoint = {
	},
	CustomReportPoint = {
		Hidden = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		CameraOnly = {AttributeType.BOOL, false},
		AutoAlertBotTag = {AttributeType.STRING, ""},
		Visibility = {AttributeType.NUMBER, 1},
		RaiseAlert = {AttributeType.INT, 1},
		MinAlert = {AttributeType.INT, 1},
		MaxAlert = {AttributeType.INT, 3},
		NotificationMessage = {AttributeType.STRING, ""},
		ReportDialogue = {AttributeType.STRING, ""},
	},
	DebugSpawnLocation = {
		Active = {AttributeType.BOOL, false},
	},
	DynamicNode = {
		Id = {AttributeType.STRING, ""},
		TakedownImmunity = {AttributeType.BOOL, false},
	},
	ElevatorFunctional = {
		OpenCondition = {AttributeType.EXPRESSION, ""},
		PlayerInElevatorVariable = {AttributeType.STATE_VALUE, ""},
		BotInElevator = {AttributeType.STATE_VALUE, ""},
		UsedVariable = {AttributeType.STATE_VALUE, ""},
		LinkedElevator = {AttributeType.STRING, ""},
		NoUsing = {AttributeType.BOOL, false},
		NoDropBlocking = {AttributeType.BOOL, false},
		WarpTargetId = {AttributeType.STRING, ""},
		WarpPointId = {AttributeType.STRING, ""},
	},
	EscapeZone = {
	},
	FlowStart = {
	},
	FreeTrigger = {
		TitleKey = {AttributeType.STRING, ""},
		SubtitleKey = {AttributeType.STRING, ""},
		DisabledSubtitle = {AttributeType.STRING, ""},
		ServerVisible = {AttributeType.EXPRESSION, ""},
		ClientVisible = {AttributeType.EXPRESSION, ""},
		ServerEnabled = {AttributeType.EXPRESSION, ""},
		HoldTime = {AttributeType.NUMBER, 0.5},
		HoldAlert = {AttributeType.EXPRESSION, ""},
		SaveProgress = {AttributeType.BOOL, false},
		Tool = {AttributeType.STRING, ""},
		LinkToProp = {AttributeType.BOOL, false},
		HiddenShuffleId = {AttributeType.STRING, ""},
		SetVariable = {AttributeType.STATE_VALUE, ""},
		SetClientVariable = {AttributeType.STATE_VALUE, ""},
		TagWhileVisible = {AttributeType.BOOL, false},
		Debug = {AttributeType.BOOL, false},
		IncrementClientVariable = {AttributeType.STATE_VALUE, ""},
		OmniDir = {AttributeType.BOOL, false},
	},
	GuardCombatNode = {
	},
	init = {
	},
	IntercomCode = {
		SocialEngineeringDialogue = {AttributeType.STRING, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
		HostageUse = {AttributeType.STATE_VALUE, ""},
		PickupNode = {AttributeType.STRING, ""},
		PickupVariable = {AttributeType.STATE_VALUE, ""},
		CallCondition = {AttributeType.EXPRESSION, ""},
		CallConditionPrompt = {AttributeType.STRING, ""},
		OpenedWithBluffVariable = {AttributeType.STATE_VALUE, ""},
		OpenedWithHostageVariable = {AttributeType.STATE_VALUE, ""},
		SocialEngineeringLevel = {AttributeType.NUMBER, 0},
		Responder = {AttributeType.STRING, ""},
	},
	IntercomPanel = {
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		PowerArea = {AttributeType.STATE_VALUE, ""},
	},
	InvestigationStandTrigger = {
		ActiveCondition = {AttributeType.EXPRESSION, ""},
		HighPriority = {AttributeType.BOOL, false},
		BotServerTag = {AttributeType.STRING, ""},
		ArrivalVariableDelay = {AttributeType.NUMBER, 0},
		ArrivalVariable = {AttributeType.STATE_VALUE, ""},
		Anim = {AttributeType.STRING, ""},
		Timeout = {AttributeType.NUMBER, 0},
		CallDialogue = {AttributeType.STRING, ""},
	},
	InvestigationTrigger = {
	},
	ItemDeposit = {
		SubtitleKey = {AttributeType.STRING, ""},
		DepositedVariable = {AttributeType.STATE_VALUE, ""},
		ItemTagForDeposit = {AttributeType.STRING, ""},
		ServerVisible = {AttributeType.EXPRESSION, ""},
		TitleKey = {AttributeType.STRING, ""},
		ClientVisible = {AttributeType.EXPRESSION, ""},
	},
	ItemSpawn = {
		Item = {AttributeType.STRING, ""},
		ItemTagString = {AttributeType.STRING, ""},
		ModelHidden = {AttributeType.BOOL, false},
		FlatTrigger = {AttributeType.BOOL, false},
		InitialPickupTime = {AttributeType.NUMBER, 0},
		PickupCondition = {AttributeType.EXPRESSION, ""},
		KeyItem = {AttributeType.BOOL, false},
		ItemRemovedVariable = {AttributeType.STATE_VALUE, ""},
		IsSpawned = {AttributeType.EXPRESSION, ""},
	},
	KillZone = {
		BotServerTag = {AttributeType.STRING, ""},
		KillerInZone = {AttributeType.BOOL, false},
		TargetInZone = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		KillCountVariable = {AttributeType.STATE_VALUE, ""},
	},
	LeaningCover = {
		AllowSpawning = {AttributeType.EXPRESSION, false},
		Enabled = {AttributeType.EXPRESSION, true},
		SpawnsIgnoreProximity = {AttributeType.BOOL, false},
		UseFromAdjacentRoom = {AttributeType.BOOL, false},
		HoldDoor = {AttributeType.BOOL, false},
		ReverseDoor = {AttributeType.BOOL, false},
		CoverTag = {AttributeType.STRING, ""},
		HoldPriority = {AttributeType.EXPRESSION, 0},
		LeanRight = {AttributeType.BOOL, false},
	},
	LeaveMissionPoint = {
	},
	LootGeneric = {
		ItemTagString = {AttributeType.STATE_VALUE, ""},
		BagColor = {AttributeType.OPTIONAL_MISSION_COLOR, Color3.new(0, 0, 0)},
		BagType = {AttributeType.STRING, "Backpack"},
		ModelHidden = {AttributeType.BOOL, false},
		InitialPickupTime = {AttributeType.NUMBER, 0.5},
		ItemRemovedVariable = {AttributeType.STRING, ""},
		Contents = {AttributeType.STRING, ""},
	},
	MissionEndZone = {
		PlayersExitedVariable = {AttributeType.STATE_VALUE, ""},
		ItemRequired = {AttributeType.STRING, ""},
		ItemSecuredVariable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
		OpenForAll = {AttributeType.EXPRESSION, ""},
		HighlightZone = {AttributeType.BOOL, true},
	},
	MissionExit = {
	},
	PathfindingBlocker = {
	},
	PlaceholderProp = {
	},
	PointOfInterest = {
		Icon = {AttributeType.STRING, ""},
		IconScale = {AttributeType.NUMBER, 1},
	},
	PowerRoomProp1 = {
		PowerArea = {AttributeType.STRING, ""},
		DetectSabotage = {AttributeType.BOOL, true},
		DamagedVariable = {AttributeType.STATE_VALUE, ""},
	},
	PowerRoomProp2 = {
		PowerArea = {AttributeType.STRING, ""},
		DetectSabotage = {AttributeType.BOOL, true},
		DamagedVariable = {AttributeType.STATE_VALUE, ""},
	},
	RandomBotSpawnLocation = {
		StartingSpawnOnly = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, true},
	},
	RewireablePanel = {
		PowerArea = {AttributeType.STATE_VALUE, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		RewireEnabled = {AttributeType.EXPRESSION, "1"},
		ObjectName = {AttributeType.STRING, ""},
		DifficultRewire = {AttributeType.BOOL, false},
	},
	SearchableFile = {
		TitleKey = {AttributeType.STRING, ""},
		SubtitleKey = {AttributeType.STRING, ""},
		ServerVisible = {AttributeType.EXPRESSION, ""},
		ClientVisible = {AttributeType.EXPRESSION, ""},
		ServerEnabled = {AttributeType.EXPRESSION, ""},
		HoldTime = {AttributeType.NUMBER, 2},
		HoldAlert = {AttributeType.EXPRESSION, ""},
		DisabledTitle = {AttributeType.EXPRESSION, ""},
		DisabledSubtitle = {AttributeType.EXPRESSION, ""},
		Notification = {AttributeType.STRING, ""},
		SetVariable = {AttributeType.STATE_VALUE, ""},
	},
	ShuffleTarget = {
		ShuffleTag = {AttributeType.STRING, ""},
		MatchVariable = {AttributeType.STATE_VALUE, ""},
	},
	SoundSource = {
		SoundId = {AttributeType.EXPRESSION, "0"},
		Volume = {AttributeType.NUMBER, 0.5},
		Looped = {AttributeType.BOOL, false},
		Active = {AttributeType.EXPRESSION, ""},
		SoundLength = {AttributeType.NUMBER, 0},
		RollOffMaxDistance = {AttributeType.NUMBER, 10000},
	},
	SpawnLocation = {
	},
	StandingCover = {
		AllowSpawning = {AttributeType.EXPRESSION, false},
		Enabled = {AttributeType.EXPRESSION, true},
		SpawnsIgnoreProximity = {AttributeType.BOOL, false},
		UseFromAdjacentRoom = {AttributeType.BOOL, false},
		HoldDoor = {AttributeType.BOOL, false},
		ReverseDoor = {AttributeType.BOOL, false},
		CoverTag = {AttributeType.STRING, ""},
		HoldPriority = {AttributeType.EXPRESSION, 0},
	},
	StateScriptPart = {
	},
	TriggerHit = {
	},
	TriggerRoom = {
		Active = {AttributeType.EXPRESSION, ""},
		PlayersInRoomVariable = {AttributeType.STATE_VALUE, ""},
		ClientInRoomVariable = {AttributeType.STATE_VALUE, ""},
	},
	TriggerRoomBot = {
		BotServerTag = {AttributeType.STRING, ""},
		ActiveCountVariable = {AttributeType.STATE_VALUE, ""},
		HostageCountVariable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	TriggerThreshhold = {
		PlayersBeforeThreshholdVariable = {AttributeType.STATE_VALUE, ""},
		PlayersAfterThreshholdVariable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	TriggerZoneBot = {
		RagdollCountVariable = {AttributeType.STATE_VALUE, ""},
		HostageCountVariable = {AttributeType.STATE_VALUE, ""},
		DeathCountVariable = {AttributeType.STATE_VALUE, ""},
		BotServerTag = {AttributeType.STRING, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	VisionBlocker = {
	},
	WarpPoint = {
		WarpPointId = {AttributeType.STRING, ""},
		WarpTargetId = {AttributeType.STRING, ""},
		WarpOnHit = {AttributeType.EXPRESSION, ""},
		WarpKeepsOffset = {AttributeType.BOOL, true},
		WarpOnIncrement = {AttributeType.EXPRESSION, ""},
		WarpHostages = {AttributeType.BOOL, true},
	},
	AlarmedBehaviorOverride = {
		BotServerTag = {AttributeType.STRING, ""},
		CustomBehavior = {AttributeType.STRING, ""},
	},
	AlertRaiseCondition = {
		Amount = {AttributeType.INT, 1},
		MinValue = {AttributeType.INT, 1},
		MaxValue = {AttributeType.INT, 3},
		Reason = {AttributeType.STRING, ""},
		Condition = {AttributeType.EXPRESSION, ""},
	},
	BodyAltTrigger = {
		BotServerTag = {AttributeType.STRING, ""},
		HoldTime = {AttributeType.NUMBER, 1},
		TitleKey = {AttributeType.STRING, ""},
		SubtitleKey = {AttributeType.STRING, ""},
		TriggerNotification = {AttributeType.STRING, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		BotClientTag = {AttributeType.STRING, ""},
		ClientVisible = {AttributeType.EXPRESSION, "1"},
		ServerEnabled = {AttributeType.EXPRESSION, "1"},
	},
	BotAltTrigger = {
		BotClientTag = {AttributeType.STRING, ""},
		BotServerTag = {AttributeType.STRING, ""},
		ServerEnabled = {AttributeType.EXPRESSION, ""},
		AllowHostages = {AttributeType.BOOL, false},
		TriggerNotification = {AttributeType.STRING, ""},
		TriggerLocalNotification = {AttributeType.STRING, ""},
		TriggerVariable = {AttributeType.STATE_VALUE, ""},
		TitleKey = {AttributeType.STRING, ""},
		AllowPatroling = {AttributeType.BOOL, false},
		ClientVisible = {AttributeType.EXPRESSION, "1"},
		HoldTime = {AttributeType.NUMBER, 1},
		SubtitleKey = {AttributeType.STRING, ""},
	},
	BotStateTracker = {
		IncapacitationCountVariable = {AttributeType.STATE_VALUE, ""},
		HostageCountVariable = {AttributeType.STATE_VALUE, ""},
		DeathCountVariable = {AttributeType.STATE_VALUE, ""},
		FleeCountVariable = {AttributeType.STATE_VALUE, ""},
		TotalCountVariable = {AttributeType.STATE_VALUE, ""},
		BotServerTag = {AttributeType.STRING, ""},
	},
	CombatSpawner = {
		ReinforcementPool = {AttributeType.STRING, ""},
		TimeBetweenSpawns = {AttributeType.EXPRESSION, ""},
		EnemyWeapons = {AttributeType.STRING, ""},
		SpawnTags = {AttributeType.STRING, ""},
		FlowMap = {AttributeType.STRING, ""},
		SpawnSquads = {AttributeType.BOOL, false},
		EnemyType = {AttributeType.STRING, ""},
		AllowDespawn = {AttributeType.BOOL, false},
		SpawnsBlockedVariable = {AttributeType.STATE_VALUE, ""},
		Active = {AttributeType.EXPRESSION, ""},
		SpawnCap = {AttributeType.EXPRESSION, 6},
		EnemyWeaponsWave1 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave2 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave3 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave4 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave5 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave6 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave7 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave8 = {AttributeType.EXPRESSION, nil},
		EnemyWeaponsWave9 = {AttributeType.EXPRESSION, nil},
	},
	CombatWaveSpawner = {
	},
	ConditionalStateUpdate = {
		Watch = {AttributeType.EXPRESSION, ""},
		Condition = {AttributeType.EXPRESSION, ""},
		InactiveVariable = {AttributeType.STATE_VALUE, ""},
		ActiveVariable = {AttributeType.STATE_VALUE, ""},
	},
	ConversationGenericSocialEngineering = {
		BotServerTag = {AttributeType.STRING, ""},
		Visible = {AttributeType.EXPRESSION, ""},
		SocialEngineeringLevel = {AttributeType.INT, 0},
		Icon = {AttributeType.STRING, "ChatGeneric"},
		Text = {AttributeType.STRING, ""},
		Dialogue = {AttributeType.STRING, ""},
		SetVariable = {AttributeType.STATE_VALUE, ""},
		Notification = {AttributeType.STRING, ""},
		NotificationDelay = {AttributeType.NUMBER, 2.5},
		Disguise = {AttributeType.STRING, ""},
	},
	ConversationResponseCustomBehavior = {
		BotServerTag = {AttributeType.STATE_VALUE, ""},
		DisableReason = {AttributeType.EXPRESSION, ""},
		SocialEngineeringLevel = {AttributeType.INT, 0},
		Dialogue = {AttributeType.STRING, ""},
		CustomBehavior = {AttributeType.STRING, ""},
	},
	CoverFillSpawner = {
		CoverSearchLimit = {AttributeType.INT, 5},
		ActiveVariable = {AttributeType.STATE_VALUE, ""},
		SpawnsBlockedVariable = {AttributeType.STATE_VALUE, ""},
		FillFrequency = {AttributeType.NUMBER, 6},
		ReinforcementPool = {AttributeType.STRING, ""},
		UnitChanceHeavy = {AttributeType.NUMBER, 0.2},
		CoverTags = {AttributeType.STRING, ""},
		SpawnTags = {AttributeType.STRING, ""},
		Active = {AttributeType.EXPRESSION, "Mission_AlarmRaised"},
		SpawnCap = {AttributeType.EXPRESSION, "8"},
	},
	CustomBehaviorCondition = {
		Priority = {AttributeType.STRING, "Custom1"},
		BotServerTag = {AttributeType.STRING, ""},
		CustomBehavior = {AttributeType.STRING, ""},
		LoopApply = {AttributeType.BOOL, false},
		Condition = {AttributeType.EXPRESSION, false},
	},
	CustomConversation = {
	},
	CustomHack = {
		DeployCost = {AttributeType.INT, 20},
		DeployTime = {AttributeType.INT, 10},
		NodeId = {AttributeType.NETWORK_ID, 1},
		NameKey = {AttributeType.STRING, ""},
		SubtitleKey = {AttributeType.STRING, ""},
		DescriptionKey = {AttributeType.STRING, ""},
		BlockDeallocation = {AttributeType.BOOL, false},
		ProgressVariable = {AttributeType.STATE_VALUE, ""},
		PauseCondition = {AttributeType.EXPRESSION, ""},
		Priority = {AttributeType.INT, 0},
		Difficulty = {AttributeType.EXPRESSION, ""},
		Suspicion = {AttributeType.INT, 1},
		PrimaryHack = {AttributeType.BOOL, false},
		Visible = {AttributeType.EXPRESSION, "1"},
		DeployedVariable = {AttributeType.STATE_VALUE, ""},
		DeployedOnceVariable = {AttributeType.STATE_VALUE, ""},
		ScriptedBehavior = {AttributeType.STRING, ""},
		DisableReason = {AttributeType.EXPRESSION, ""},
		IconId = {AttributeType.EXPRESSION, 0},
	},
	DelayedStateUpdate = {
		Watch = {AttributeType.EXPRESSION, ""},
		DelayTime = {AttributeType.EXPRESSION, 5},
		SetVariable = {AttributeType.STATE_VALUE, ""},
		OnlyMatch = {AttributeType.BOOL, false},
	},
	HackableDoor = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
	},
	HackableElevator = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		NetworkLink = {AttributeType.NETWORK_ID_STRING, ""},
	},
	HackingNodeStatus = {
		NetworkId = {AttributeType.NETWORK_ID, 1},
		DisabledVariable = {AttributeType.STATE_VALUE, ""},
		CompromisedVariable = {AttributeType.STATE_VALUE, ""},
	},
	HiddenShuffle = {
		HiddenShuffleId = {AttributeType.STRING, ""},
		FrontCount = {AttributeType.INT, 0},
		BackCount = {AttributeType.INT, 0},
		RevealCount = {AttributeType.INT, 1},
		RevealCountVariable = {AttributeType.STATE_VALUE, ""},
		FailCountVariable = {AttributeType.STATE_VALUE, ""},
		ClientFailCountVariable = {AttributeType.STATE_VALUE, ""},
		Seed = {AttributeType.INT, 1},
		RevealAllCondition = {AttributeType.EXPRESSION, ""},
	},
	ItemStateTracker = {
		GroundCountVariable = {AttributeType.STATE_VALUE, ""},
		TotalHeldCountVariable = {AttributeType.STATE_VALUE, ""},
		BotHeldCountVariable = {AttributeType.STATE_VALUE, ""},
		ClientHeldCountVariable = {AttributeType.STATE_VALUE, ""},
		ItemTag = {AttributeType.STRING, ""},
	},
	ItemSwapCondition = {
		Condition = {AttributeType.EXPRESSION, ""},
		SwapItemType = {AttributeType.STRING, ""},
		SwapItemTag = {AttributeType.STRING, ""},
		TargetItemTag = {AttributeType.STRING, ""},
	},
	LerpOperation = {
		OutputVariable = {AttributeType.STATE_VALUE, ""},
		Value0 = {AttributeType.EXPRESSION, ""},
		Value1 = {AttributeType.EXPRESSION, ""},
		Delta = {AttributeType.EXPRESSION, 0.5},
		AlwaysUpdate = {AttributeType.EXPRESSION, false},
		UpdateClock = {AttributeType.EXPRESSION, "0"},
	},
	MissionCompletionTrigger = {
		Condition = {AttributeType.EXPRESSION, ""},
		Timeout = {AttributeType.NUMBER, 1},
		CompleteVariable = {AttributeType.STATE_VALUE, ""},
	},
	NetworkRouter = {
	},
	Notification = {
		Condition = {AttributeType.EXPRESSION, ""},
		Notification = {AttributeType.STRING, ""},
	},
	RandomBotSpawner = {
		SpawningActive = {AttributeType.EXPRESSION, ""},
		SpawnTimeMin = {AttributeType.NUMBER, 4},
		SpawnTimeMax = {AttributeType.NUMBER, 10},
		Behavior = {AttributeType.STRING, ""},
		Class = {AttributeType.STRING, ""},
		CivilianHighlight = {AttributeType.BOOL, false},
		DetectionSpeed = {AttributeType.NUMBER, 1},
		NodesBreak = {AttributeType.STRING, ""},
		EnforceClass = {AttributeType.STRING, ""},
		Profile = {AttributeType.STRING, ""},
		Title = {AttributeType.STRING, ""},
		Outfit = {AttributeType.STRING, ""},
		Nodes = {AttributeType.STRING, ""},
		HostageDifficulty = {AttributeType.NUMBER, 0},
		ObjectiveHighlight = {AttributeType.BOOL, false},
		Weapon = {AttributeType.STRING, ""},
	},
	ReinforcementPool = {
		PoolName = {AttributeType.STRING, ""},
		WaveResetTimeMinimum = {AttributeType.NUMBER, 0},
		WaveStateVariable = {AttributeType.STATE_VALUE, ""},
		WaveVariable = {AttributeType.STATE_VALUE, ""},
		PoolLimit = {AttributeType.EXPRESSION, ""},
		RemainingVariable = {AttributeType.STATE_VALUE, ""},
		ActiveVariable = {AttributeType.STATE_VALUE, ""},
		WaveResetTime = {AttributeType.EXPRESSION, ""},
		WaveResetTimeDecrease = {AttributeType.NUMBER, 0},
	},
	SearchPatternCondition = {
		Condition = {AttributeType.EXPRESSION, ""},
		BotServerTag = {AttributeType.STRING, ""},
	},
	ServerChat = {
	},
	SniperSpawner = {
		Active = {AttributeType.EXPRESSION, ""},
		Nodes = {AttributeType.STRING, ""},
		InitialSpawns = {AttributeType.EXPRESSION, 0},
		RespawnRate = {AttributeType.EXPRESSION, 20},
	},
	StateScript = {
	},
	TargetLureHack = {
	},
	TimerComponent = {
		SetVariable = {AttributeType.STATE_VALUE, ""},
		SetFormattedVariable = {AttributeType.STATE_VALUE, ""},
		StartValue = {AttributeType.EXPRESSION, 0},
		TargetValue = {AttributeType.EXPRESSION, 60},
		Increment = {AttributeType.EXPRESSION, 1},
		Offset = {AttributeType.EXPRESSION, ""},
		Enabled = {AttributeType.EXPRESSION, ""},
	},
	TrackBotsDown = {
	},
	TrackItemHeldServer = {
	},
	TrackNodeReserved = {
	},
	AutoConversationTrigger = {
		BotClientTag = {AttributeType.STRING, ""},
		Active = {AttributeType.EXPRESSION, ""},
	},
	BlackoutScreen = {
	},
	FileUITrigger = {
		Trigger = {AttributeType.EXPRESSION, ""},
		Lines = {AttributeType.STRING, ""},
	},
	GameCredits = {
	},
	HackingNodeHighlight = {
	},
	LocalChat = {
		DelayStart = {AttributeType.NUMBER, 0},
		Active = {AttributeType.EXPRESSION, ""},
		Dialogue = {AttributeType.STRING, ""},
		TriggerOnce = {AttributeType.BOOL, false},
		StealthOnly = {AttributeType.BOOL, false},
	},
	LocalStateComponents = {
	},
	LocalWeaponTracker = {
	},
	LocationCard = {
	},
	MusicController = {
		ActivePriority = {AttributeType.EXPRESSION, "1"},
		TrackId = {AttributeType.EXPRESSION, 0},
		NoLoop = {AttributeType.BOOL, false},
		Volume = {AttributeType.NUMBER, 0.5},
		MusicType = {AttributeType.STRING, Stealth},
	},
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX3B2F8740106C406E83127B1CC848F88C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GlobalAttributes</string>
						<string name="ScriptGuid">{C82FF03D-384C-4A72-8725-96A2B84E5EC8}</string>
						<ProtectedString name="Source"><![CDATA[local PropAttributeTypes = require(script.Parent.PropAttributeTypes)
return { GlobalVariables = { PropAttributeTypes.OPTIONAL_BOOL, nil },
OnProp = { PropAttributeTypes.OPTIONAL_BOOL, nil },
ScriptMove = { PropAttributeTypes.OPTIONAL_BOOL, nil },
Index = { PropAttributeTypes.OPTIONAL_INT, nil },
CanShatter = { PropAttributeTypes.OPTIONAL_BOOL, nil },
Tag = { PropAttributeTypes.STRING, nil },
TagOffset = { PropAttributeTypes.VECTOR3, nil },
StaticTag = { PropAttributeTypes.STRING, nil },
HasTopBarrier = { PropAttributeTypes.OPTIONAL_BOOL, nil },
Indestructible = { PropAttributeTypes.EXPRESSION, nil },
IsSpawned = { PropAttributeTypes.EXPRESSION, nil },
Color0 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
Color1 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
Color2 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
Color3 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
Color4 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
Color5 = { PropAttributeTypes.OPTIONAL_MISSION_COLOR, nil },
Material0 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
Material1 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
Material2 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
Material3 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
Material4 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
Material5 = { PropAttributeTypes.OPTIONAL_MATERIAL, nil },
Type = { PropAttributeTypes.STRING, nil },
AltPropModel = { PropAttributeTypes.STRING, nil },
FadeOutCondition = { PropAttributeTypes.STRING, nil }}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXF4A70A89D6A2455BA5DE8447AF253A9A">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">PropAttributeTypes</string>
						<string name="ScriptGuid">{F6823BC2-884C-4658-9542-7A991DD1A476}</string>
						<ProtectedString name="Source"><![CDATA[local PropAttributeTypes

PropAttributeTypes = {
	NUMBER = 1,
	INT = 2,
	EXPRESSION = 3,
	STATE_VALUE = 4,
	STRING = 5,
	NETWORK_ID = 6,
	NETWORK_ID_STRING = 7,
	OPTIONAL_BOOL = 8,
	OPTIONAL_MISSION_COLOR = 9,
	OPTIONAL_MATERIAL = 10,
	VECTOR3 = 11,
	OPTIONAL_INT = 12,
	BOOL = 13,
	CFRAME = 14,
}

return PropAttributeTypes]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX8C055DD62A53458397F5E701E988B06F">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">OneClickTools</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXF6BC7C6363064AF28EC0A19D0BCA93ED">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{311C54E9-667F-47AD-8660-BEFB18238E0C}</string>
					<ProtectedString name="Source"><![CDATA[local module = {}

local toolsList = {
	CellFixup = script.Parent.CellFixup.Main,
	CustomPropBaseGen = script.Parent.CustomPropBaseGen.Main,
}

local oneClickMenu: PluginMenu? = nil

local function BuildMenu(newPluginMenu, newAction)
	oneClickMenu = newPluginMenu("OneClickTools", "One-Click Tools", "rbxassetid://106247740984287")
	
	for toolName, toolModule in pairs(toolsList) do
		print(`\tInitializing {toolName}...`)
		
		local actionInfo = require(toolModule)
		local toolAction = newAction(`OCT_{actionInfo.ID}`, actionInfo.ID, actionInfo.Tooltip, actionInfo.IconAssetID)
		
		toolAction.Triggered:Connect(actionInfo.ClickedCallback)
		oneClickMenu:AddAction(toolAction)
	end
end

local function OpenWindow()
	oneClickMenu:ShowAsync()
end

return {
	ID = "One-Click Tools",
	Tooltip = "A collection of tools activated by a single click.\nExists to avoid cluttering your plugin bar :3",
	IconAssetID = "rbxassetid://125187645185104",
	ClickedCallback = OpenWindow,
	BuildMenu = BuildMenu
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBX7CEF4C19413A47DDA43A16E6F5399933">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">CellFixup</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXF884F95654AB44D88E39437F7A104DDD">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Main</string>
						<string name="ScriptGuid">{F691E76A-0216-4C85-BF84-519152CBD9F2}</string>
						<ProtectedString name="Source"><![CDATA[local ChangeHistoryService = game:GetService("ChangeHistoryService")
local common = require(script.Parent.Parent.Parent.ToolsCommon)

-- Hash politely borrowed from the official Cell tools
local function hashName(name)
	if name == "Default" then
		return Color3.new(0, 0, 0)
	end

	local h = 5^7
	local n = 0
	for i = 1, #name do
		n = (n * 257 + string.byte(name, i, i)) % h 
	end
	local color = Color3.fromHSV((n % 1000) / 1000, 0.5, 0.5)
	return color
end

local function FixCell(cell, cellPart, cellCol)
	cellPart.Color = cellCol
	cellPart.CastShadow = false
	cellPart.Material = Enum.Material.Plastic
	cellPart.Transparency = 0.5
	cellPart.TopSurface = Enum.SurfaceType.Studs
	cellPart.BottomSurface = Enum.SurfaceType.Inlet

	if cellPart.Shape ~= Enum.PartType.Block then warn(`Cell Part {cell.Name}.{cellPart.Name} is non-block shape {tostring(cellPart.Shape)}!`) end
end

local function LinkTexture(normal)
	local tex = Instance.new("Texture")
	tex.Texture = "rbxassetid://124542772943020"
	tex.StudsPerTileU = 3
	tex.StudsPerTileV = 1
	tex.Face = normal
	tex.Name = `Texture{normal.Name}`
	return tex
end

local function FixLink(linkPart)
	linkPart.Color = Color3.fromRGB(127, 63, 65)
	linkPart.CastShadow = false
	linkPart.Material = Enum.Material.Plastic
	linkPart.Transparency = 0.5
	linkPart.TopSurface = Enum.SurfaceType.Smooth
	linkPart.BottomSurface = Enum.SurfaceType.Smooth

	if linkPart:FindFirstChild("TextureFront") == nil then
		local frontTex = LinkTexture(Enum.NormalId.Front)
		frontTex.Parent = linkPart
	end

	if linkPart:FindFirstChild("TextureBack") == nil then
		local backTex = LinkTexture(Enum.NormalId.Back)
		backTex.Parent = linkPart
	end

	for k, v in next, linkPart:GetChildren() do
		if typeof(v) ~= "Instance" then continue end
		if v.Name == "TextureFront" then continue end
		if v.Name == "TextureBack" then continue end
		v:Destroy()
	end
end

local function CellFixup()
	local missionFolder = common:LevelFolder()
	if missionFolder == nil then warn("Failed to find Custom Mission folder!") return end
	
	local recording = ChangeHistoryService:TryBeginRecording("Cell Fixup")
	if not recording then warn("Failed to initialize history recording, doing nothing") return end
	
	for _, cell in next, missionFolder.Cells:GetChildren() do
		local cellColour = hashName(cell.Name)
		if cell.Name == "Links" then
			for _, linkPart in next, cell:GetChildren() do
				if not linkPart:IsA("BasePart") then continue end
				FixLink(linkPart)
			end
		else
			for _, cellPart in next, cell:GetChildren() do
				if not cellPart:IsA("BasePart") then continue end
				FixCell(cell, cellPart, cellColour)
			end
		end
	end
	
	ChangeHistoryService:FinishRecording(recording, Enum.FinishRecordingOperation.Commit)
end

return {
	ClickedCallback = CellFixup,
	ID = "Cell Fixup",
	Tooltip = "Fix cell styling",
	IconAssetID = "rbxassetid://115706109343056"
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBXC6DFD4D73D5C458AA9691374B5ED5B1F">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">CustomPropBaseGen</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXAEE4D509F8DC4DB7A4CA2184CBB1FAA6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Main</string>
						<string name="ScriptGuid">{CAAC927D-AFB9-44EF-A1CF-2D4715B27B47}</string>
						<ProtectedString name="Source"><![CDATA[local ChangeHistoryService = game:GetService("ChangeHistoryService")
local selection = game:GetService("Selection")

local common = require(script.Parent.Parent.Parent.ToolsCommon)

local function BaseGen()
	
	local recording = ChangeHistoryService:TryBeginRecording("Generate Prop Base")
	if not recording then warn("Failed to initialize history recording, doing nothing") return end
	
	for _, v in pairs(selection:Get()) do
		if not v:IsA("Model") then warn(`Selection {v.Parent.Name}.{v.Name} is not a Model! Skipping`) continue end
		
		local basePart = common:FindFirstChildWithNameAndClass(v, "Base", "BasePart") 
		
		if basePart ~= nil then
			-- Ignore existing Base when getting bounds
			basePart.Parent = nil
		end
		
		local transform, size = v:GetBoundingBox()
		
		basePart = basePart or Instance.new("Part")
		basePart.Parent = v
		basePart.Transparency = 1
		basePart.CFrame = transform
		basePart.Size = size
		basePart.Name = "Base"
		basePart.Anchored = true
	end
	
	ChangeHistoryService:FinishRecording(recording, Enum.FinishRecordingOperation.Commit)
	
end

return {
	ClickedCallback = BaseGen,
	ID = "Generate Prop Base",
	Tooltip = "Generate the 'Base' part for the selected custom prop",
	IconAssetID = "rbxassetid://73246176602542"
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>