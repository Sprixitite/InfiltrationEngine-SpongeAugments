<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBX502603FA19CE41E489FDCFF5E74F8B23">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<string name="Name">SpongeZoneTools</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="Folder" referent="RBX767674C9E9F048B6A10AD338273D15EA">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">ToggleGroupVis</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXF861031EF38B469381F5F5AB6EDBC6FC">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{7B825C44-7342-4A3D-9FBE-7FC60ED35674}</string>
					<ProtectedString name="Source"><![CDATA[local ChangeHistoryService = game:GetService("ChangeHistoryService")
local SelectionService = game:GetService("Selection")

local GROUP_VIS_ATTR_NAME = "_SpongeGroupVisibility"
local ELMNT_VIS_ATTR_NAME = "_SpongeElmntVisibility"

local function IsGroup(inst: Instance)
	local instType = inst.ClassName
	return instType == "Folder" or instType == "Model", instType
end

local function StoreElementProperty(element: Instance, property: string, newVal: any)
	element:SetAttribute(`_SpongeElmnt{property}`, element[property])
	element[property] = newVal
end

local function RestoreElementProperty(element: Instance, property: string, expected: any)
	if element[property] ~= expected then
		warn(`{element.Name}{property} set to unexpected value after being toggled, assuming new value to be intentional`)
		return element[property]
	end
	local stored = element:GetAttribute(`_SpongeElmnt{property}`)
	element[property] = stored
	return stored
end

local function ToggleElementVisibility(element: BasePart, nextVisState: boolean)
	if nextVisState == element:GetAttribute(ELMNT_VIS_ATTR_NAME) then
		--print(`{element.Name} already in desired state, leaving as-is`)
		return
	end

	if nextVisState and (element:GetAttribute(ELMNT_VIS_ATTR_NAME) == nil) then
		warn("Element in disabled visgroup had no visibility metadata - likely added after disable. Skipping")
		return
	end

	if nextVisState == false then
		StoreElementProperty(element, "Transparency", 1)
		StoreElementProperty(element, "Locked",       true)
		StoreElementProperty(element, "CanCollide",   false)
		StoreElementProperty(element, "CanTouch",     false)
		StoreElementProperty(element, "CanQuery",     false)
	else
		RestoreElementProperty(element, "Transparency", 1)
		RestoreElementProperty(element, "Locked",       true)
		RestoreElementProperty(element, "CanCollide",   false)
		RestoreElementProperty(element, "CanTouch",     false)
		RestoreElementProperty(element, "CanQuery",     false)
	end
	
	element:SetAttribute(ELMNT_VIS_ATTR_NAME, nextVisState)
end

local function CalculateGroupParentsRecurse(parent: Instance, tbl: table?)
	tbl = tbl or {}
	if parent == nil then warn("Group's root parent was nil!?") return tbl end
	if parent == workspace.Parent then return tbl end
	if IsGroup(parent) then
		if parent:GetAttribute(GROUP_VIS_ATTR_NAME) == nil then
			parent:SetAttribute(GROUP_VIS_ATTR_NAME, true)
		end
		tbl[#tbl+1] = parent:GetAttribute(GROUP_VIS_ATTR_NAME)
	end
	return CalculateGroupParentsRecurse(parent.Parent, tbl)
end

local function CalculateGroupVisibility(group)
	local visTbl = CalculateGroupParentsRecurse(group)
	for _, v in pairs(visTbl) do
		if not v then return false end
	end
	return true
end

local function ToggleGroupVisibility(group: Instance, invert: boolean)
	-- Invert the selected group's visibility
	-- Assume group is visible if no group vis is set
	if group:GetAttribute(GROUP_VIS_ATTR_NAME) == nil then group:SetAttribute(GROUP_VIS_ATTR_NAME, true) end
	if invert then group:SetAttribute(GROUP_VIS_ATTR_NAME, not group:GetAttribute(GROUP_VIS_ATTR_NAME)) end

	local thisGroupIsVisible = CalculateGroupVisibility(group)

	for _, child in pairs(group:GetChildren()) do
		local isBasePart = child:IsA("BasePart")
		local isGroup = IsGroup(child)
		if not (isBasePart or isGroup) then continue end
		if isBasePart then ToggleElementVisibility(child, thisGroupIsVisible) end 
		if isGroup then ToggleGroupVisibility(child, false) end
	end
end

local function GroupVisTogglePressed()
	local selection = SelectionService:Get()

	local selectionIsValid = true
	for instName, inst in pairs(selection) do
		local instValid, instType = IsGroup(inst)
		if not instValid then
			warn(`GroupVisToggle only works on Models & Folders, deselect {instType} {instName} before running!`)
			selectionIsValid = false
		end
	end

	if not selectionIsValid then return end

	local recording = ChangeHistoryService:TryBeginRecording("Toggle Group Visibility")
	if not recording then warn("Failed to initialize history recording, doing nothing") return end

	for _, inst in pairs(selection) do
		ToggleGroupVisibility(inst, true)
	end

	ChangeHistoryService:FinishRecording(recording, Enum.FinishRecordingOperation.Commit)

end

return {
	ClickedCallback = GroupVisTogglePressed,
	ID = "Toggle Group Visibility", 
	Tooltip = "Toggle the visibility of a folder/model", 
	IconAssetID = "rbxassetid://86288177650040"
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX84A953D09E194A7794A8655328F49E41">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">CellFixup</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXDA08DB19A00B44FE8148567F5C09C4C4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{F691E76A-0216-4C85-BF84-519152CBD9F2}</string>
					<ProtectedString name="Source"><![CDATA[local ChangeHistoryService = game:GetService("ChangeHistoryService")

-- Hash politely borrowed from the official Cell tools
local function hashName(name)
	if name == "Default" then
		return Color3.new(0, 0, 0)
	end

	local h = 5^7
	local n = 0
	for i = 1, #name do
		n = (n * 257 + string.byte(name, i, i)) % h 
	end
	local color = Color3.fromHSV((n % 1000) / 1000, 0.5, 0.5)
	return color
end

local function FixCell(cell, cellPart, cellCol)
	cellPart.Color = cellCol
	cellPart.CastShadow = false
	cellPart.Material = Enum.Material.Plastic
	cellPart.Transparency = 0.5
	cellPart.TopSurface = Enum.SurfaceType.Studs
	cellPart.BottomSurface = Enum.SurfaceType.Inlet

	if cellPart.Shape ~= Enum.PartType.Block then warn(`Cell Part {cell.Name}.{cellPart.Name} is non-block shape {tostring(cellPart.Shape)}!`) end
end

local function LinkTexture(normal)
	local tex = Instance.new("Texture")
	tex.Texture = "rbxassetid://124542772943020"
	tex.StudsPerTileU = 3
	tex.StudsPerTileV = 1
	tex.Face = normal
	tex.Name = `Texture{normal.Name}`
	return tex
end

local function FixLink(linkPart)
	linkPart.Color = Color3.fromRGB(127, 63, 65)
	linkPart.CastShadow = false
	linkPart.Material = Enum.Material.Plastic
	linkPart.Transparency = 0.5
	linkPart.TopSurface = Enum.SurfaceType.Smooth
	linkPart.BottomSurface = Enum.SurfaceType.Smooth

	if linkPart:FindFirstChild("TextureFront") == nil then
		local frontTex = LinkTexture(Enum.NormalId.Front)
		frontTex.Parent = linkPart
	end

	if linkPart:FindFirstChild("TextureBack") == nil then
		local backTex = LinkTexture(Enum.NormalId.Back)
		backTex.Parent = linkPart
	end

	for k, v in next, linkPart:GetChildren() do
		if typeof(v) ~= "Instance" then continue end
		if v.Name == "TextureFront" then continue end
		if v.Name == "TextureBack" then continue end
		v:Destroy()
	end
end

local function CellFixup()
	local missionFolder = workspace:FindFirstChild("DebugMission") or workspace:FindFirstChild("Level")
	for _, cell in next, missionFolder.Cells:GetChildren() do
		local cellColour = hashName(cell.Name)
		if cell.Name == "Links" then
			for _, linkPart in next, cell:GetChildren() do
				if not linkPart:IsA("BasePart") then continue end
				FixLink(linkPart)
			end
		else
			for _, cellPart in next, cell:GetChildren() do
				if not cellPart:IsA("BasePart") then continue end
				FixCell(cell, cellPart, cellColour)
			end
		end
	end
end

return {
	ClickedCallback = CellFixup,
	ID = "Cell Fixup",
	Tooltip = "Fix cell styling",
	IconAssetID = "rbxassetid://115706109343056"
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Script" referent="RBX7E85B066530445539393535BC72FC175">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Main</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{BA25A1CB-E014-4DF4-B49E-AEDDD88D8479}</string>
				<ProtectedString name="Source"><![CDATA[local spongeZoneToolbar = plugin:CreateToolbar("SpongeZone Tools")

local allPlugins = {
	CellFixup = script.Parent.CellFixup.Main,
	ToggleGroupVis = script.Parent.ToggleGroupVis.Main
}

for k, v in pairs(allPlugins) do
	print(`Initializing SpongeZone tool {k}...`)
	
	local toolDetails = require(v)
	local toolButton = spongeZoneToolbar:CreateButton(toolDetails.ID, toolDetails.Tooltip, toolDetails.IconAssetID, toolDetails.Text)
	
	toolButton.Click:Connect(toolDetails.ClickedCallback)
end]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Folder" referent="RBX00D8A302E5A543ACB96C6E5BEA9662D4">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<string name="Name">PropArray</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX2C8CAB62605947F88A58BC73586BAA35">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Main</string>
					<string name="ScriptGuid">{35934633-F930-4752-BA83-99A83B4FBED3}</string>
					<ProtectedString name="Source"><![CDATA[local ChangeHistoryService = game:GetService("ChangeHistoryService")

local function NewStyledFrame()
	local newFrame = Instance.new("Frame")
	newFrame.BackgroundTransparency = 0.5
	newFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
	return newFrame
end

local function NewVectorInput()
	local container = NewStyledFrame()
	local componentControls = { x = true, y = true, z = true }
	local i = 0
	for k, _ in pairs(componentControls) do
		componentControls[k] = script.Parent.UI.VectorComponentInput:Clone()
		componentControls[k].Name = `{i}VectorComponentInput`
		componentControls[k].Parent = container
		componentControls[k]["0Label"].Text = string.upper(k)
		i = i + 1
	end
	return { Container = container, Components = componentControls }
end

local function ReadVectorInput(vi)
	for k, componentInput in pairs(vi.Components) do
		componentInput["1Input"]
	end
end

local function OpenMenu()
	
end

return {
	ClickedCallback = OpenMenu,
	ID = "Prop Array",
	Tooltip = "Repeat a prop N times along a vector",
	IconAssetID = "rbxassetid://106247740984287"
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXF9F09C8F3E094811985F9F22A81C82D9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">UI</string>
					<string name="ScriptGuid">{E91F60D1-D0F8-4574-A4B5-D8BC735E9A8E}</string>
					<ProtectedString name="Source"><![CDATA[local PropArrayUI = {}

PropArrayUI.PADDING4 = UDim.new(0, 4)
PropArrayUI.PADDING8 = UDim.new(0, 8)

PropArrayUI.ROUNDED8 = Instance.new("UICorner")
PropArrayUI.ROUNDED8.CornerRadius = PropArrayUI.PADDING4

PropArrayUI.VECTOR_COMPONENT_UILAYOUT = Instance.new("UIListLayout")
PropArrayUI.VECTOR_COMPONENT_UILAYOUT.SortOrder = Enum.SortOrder.Name
PropArrayUI.VECTOR_COMPONENT_UILAYOUT.HorizontalFlex = Enum.UIFlexAlignment.SpaceAround
PropArrayUI.VECTOR_COMPONENT_UILAYOUT.VerticalAlignment = Enum.VerticalAlignment.Center
PropArrayUI.VECTOR_COMPONENT_UILAYOUT.Padding = PropArrayUI.PADDING8

function PropArrayUI.NewFrame(padded: boolean?, ...: Instance)
	padded = padded or false
	
	local newFrame = Instance.new("Frame")
	newFrame.BackgroundTransparency = 0.5
	newFrame.BackgroundColor3 = Color3.fromRGB(0,0,0)
	
	if padded then
		local framePadding = Instance.new("UIPadding")
		local paddingUdim = UDim.new(0, 8)
		framePadding.PaddingTop = paddingUdim
		framePadding.PaddingLeft = paddingUdim
		framePadding.PaddingRight = paddingUdim
		framePadding.PaddingBottom = paddingUdim
		framePadding.Parent = newFrame
	end
	
	for _, item in pairs({...}) do
		item.Parent = newFrame
	end
	
	return newFrame
end

function PropArrayUI.NewAttrLabel(text: string, colour: Color3)
	local newLabel = PropArrayUI.NewLabel(text)
	newLabel.BackgroundColor3 = colour
	local _, _, v = colour:ToHSV()
	newLabel.TextColor3 = v>0.5 and Color3.fromRGB(0,0,0) or Color3.fromRGB(255,255,255)
	PropArrayUI.ROUNDED8:Clone().Parent = newLabel
	return newLabel
end

function PropArrayUI.NewLabel(text: string)
	local newLabel = Instance.new("TextLabel")
	newLabel.Font = Enum.Font.SciFi
	newLabel.TextScaled = true
	newLabel.Text = text
	return newLabel
end

function PropArrayUI.NewTextBox(placeholderText: string)
	local newTextbox = Instance.new("TextBox")
	newTextbox.Font = Enum.Font.SciFi
	newTextbox.TextScaled = true
	newTextbox.PlaceholderText = placeholderText
	newTextbox.
	return newTextbox
end

local function NewVectorComponent(label)
	local label = PropArrayUI.NewAttrLabel(label, Color3.new(255,255,255))
	label.SizeConstraint = Enum.SizeConstraint.RelativeYY
	label.Name = "0Label"
	
	local container = PropArrayUI.NewFrame(false, PropArrayUI.VECTOR_COMPONENT_UILAYOUT:Clone(), label, )
end

function PropArrayUI.NewVectorInput()
	
end

return PropArrayUI
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
	</Item>
</roblox>